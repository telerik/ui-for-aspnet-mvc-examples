@using Kendo.Mvc.UI

@{
    ViewBag.Title = "Index";
}

﻿@(Html.Kendo().Grid<Telerik.Examples.Mvc.Areas.GridCheckboxClientTemplate.Models.ProductViewModel>()
      .Name("grid")
      .Columns(columns =>
      {
          columns.Bound(product => product.Discontinued).ClientTemplate("<input type='checkbox' data-bind='checked:Discontinued' />").HeaderTemplate("<input id='checkAll' type='checkbox' onclick='checkAll(this)'/>");
          columns.Bound(product => product.ProductID).Width(100);
          columns.Bound(product => product.ProductName);
          columns.Bound(product => product.UnitsInStock).Width(250);
          columns.Command(commands =>
          {
              commands.Edit(); // The "edit" command will edit and update data items
              commands.Destroy(); // The "destroy" command removes data items
          }).Title("Commands").Width(200);
      })
      .Events(ev => ev.DataBound("onDataBound"))
      .ToolBar(toolbar => toolbar.Create()) // The "create" command adds new data items
      .Editable(editable => editable.Mode(GridEditMode.InLine)) // Use inline editing mode
      .DataSource(dataSource =>
          dataSource.Ajax()
            .Model(model =>
            {
                model.Id(product => product.ProductID); // Specify the property which is the unique identifier of the model
                model.Field(product => product.ProductID).Editable(false); // Make the ProductID property not editable
            })
            .Read(read => read.Action("Products_Read", "Home"))  // Action invoked when the grid needs data
            .Create(create => create.Action("Products_Create", "Home")) // Action invoked when the user saves a new data item
            .Update(update => update.Action("Products_Update", "Home"))  // Action invoked when the user saves an updated data item
            .Destroy(destroy => destroy.Action("Products_Destroy", "Home")) // Action invoked when the user removes a data item
      )
      .Pageable()
)

<script>
    function checkAll(input) {
        var grid = $("#grid").data("kendoGrid");
        var items = grid.items();
        items.each(function () {
            var dataItem = grid.dataItem(this);
            if (dataItem.Discontinued != input.checked) {
                dataItem.Discontinued = input.checked;
                dataItem.dirty = true;
            }
        })

        grid.dataSource.sync();
    }

    function onDataBound(e) {
        e.sender.items().each(function () {
            var dataItem = e.sender.dataItem(this);
            kendo.bind(this, dataItem);
            if (dataItem.Discontinued) {
                $(this).addClass("k-selected");
            }
        })

        $("#checkAll")[0].checked = e.sender.items().find(":checked").length == e.sender.dataSource.view().length;
    }
</script>
