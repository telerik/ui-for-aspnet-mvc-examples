<script src="@Url.Content("~/Scripts/jquery.signalR-2.0.2.min.js")"></script>
<script src="@Url.Content("~/signalr/hubs")"></script>

<script>

    var lockedRecords = {};
    var productHub = {};
    var hubStart = {};

    $(function () {
        productHub = $.connection.productHub;

        productHub.client.lockRecord = function (record) {
            lockedRecords[record.id] = true;
        };

        productHub.client.unlockRecord = function (record) {
            lockedRecords[record.id] = false;
        }

        hubStart = $.connection.hub.start();
    })

    function forRead(data, type) {
        var scheduler = $("#scheduler").data("kendoScheduler");

        var timezone = scheduler.options.timezone;
        var startDate = kendo.timezone.convert(scheduler.view().startDate(), timezone, "Etc/UTC");

        var initialEndDate = scheduler.view().endDate();
        var augmentedEndDate = new Date(initialEndDate.valueOf());
        augmentedEndDate.setDate(initialEndDate.getDate() + 1);
        var endDate = kendo.timezone.convert(augmentedEndDate, timezone, "Etc/UTC");

        var result = {
            Start: new Date(startDate.getTime() - (startDate.getTimezoneOffset() * kendo.date.MS_PER_MINUTE)),
            End: new Date(endDate.getTime() - (endDate.getTimezoneOffset() * kendo.date.MS_PER_MINUTE))
        }

        console.log(result);

        return result;
    }

    function onMap(data, type) {
        switch (type) {
            case "read": {
                return forRead(data, type);
            }
            default: {
                return data;
            }
        }
    }
</script>


@(Html.Kendo().Notification()
      .Name("notification")
      .Width("100%")
      .Position(position => position.Top(0).Left(0))
)

@(Html.Kendo().Scheduler<Telerik.Examples.Mvc.Areas.SchedulerSignalRServerFiltering.Models.MeetingViewModel>()
    .Name("scheduler")
    .Date(new DateTime(2013, 6, 13))
    .StartTime(new DateTime(2013, 6, 13, 7, 00, 00))
    .Height(600)
    .Views(views =>
    {
        views.DayView();
        views.WeekView(weekView => weekView.Selected(true));
        views.MonthView();
        views.AgendaView();
    })
    .Timezone("Etc/UTC")
    .Resources(resource =>
    {
        resource.Add(m => m.RoomID)
            .Title("Room")
            .DataTextField("Text")
            .DataValueField("Value")
            .DataColorField("Color")
            .BindTo(new[] {
            new { Text = "Meeting Room 101", Value = 1, Color = "#6eb3fa" },
            new { Text = "Meeting Room 201", Value = 2, Color = "#f58a8a" }
        });
    })
    .Editable(editable => editable.Update(false))
    .DataSource(dataSource => dataSource
        .SignalR()
        .ServerFiltering(true)
        .Transport(tr => tr
            .ParameterMap("onMap")
            .Promise("hubStart")
            .Hub("productHub")
            .Client(c => c
                .Read("read")
                .Create("create")
                .Update("update")
                .Destroy("destroy"))
            .Server(s => s
                .Read("read")
                .Create("create")
                .Update("update")
                .Destroy("destroy")))
        .Schema(schema => schema
            .Model(model =>
            {
                model.Id(m => m.MeetingID);
                model.Field(m => m.MeetingID).Editable(false);
                model.Field("start", typeof(DateTime)).From("Start");
                model.Field("end", typeof(DateTime)).From("End");
                model.Field("title", typeof(string)).From("Title");
                model.Field("description", typeof(string)).From("Description");
                model.Field("recurrenceID", typeof(int)).From("RecurrenceID");
                model.Field("recurrenceRule", typeof(string)).From("RecurrenceRule");
                model.Field("recurrenceException", typeof(string)).From("RecurrenceException");
                model.Field("isAllDay", typeof(bool)).From("IsAllDay");
                model.Field("startTimezone", typeof(string)).From("StartTimezone");
                model.Field("endTimezone", typeof(string)).From("EndTimezone");
            })
        )
    )
)