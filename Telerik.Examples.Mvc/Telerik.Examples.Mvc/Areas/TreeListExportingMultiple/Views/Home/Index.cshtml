<script src="//cdnjs.cloudflare.com/ajax/libs/jszip/2.4.0/jszip.min.js"></script>

<button class="k-button" id="export">Export TreeLists to Excel</button>


<h3>Designers</h3>
@(Html.Kendo().TreeList<Telerik.Examples.Mvc.Areas.TreeListExportingMultiple.Models.EmployeeDirectoryModel>()
    .Name("designers")
    .Columns(columns =>
    {
        columns.Add().Field(e => e.FirstName).Width(220);
        columns.Add().Field(e => e.LastName);
        columns.Add().Field(e => e.Position);
        columns.Add().Field(e => e.Address);
    })
    .Excel(excel => excel.FileName("Kendo UI TreeList Export.xlsx").ProxyURL(Url.Action("Excel_Export_Save")))
    .Filterable()
    .Sortable()
    .DataSource(dataSource => dataSource
        .Read(read => read.Action("All", "EmployeeDirectory"))
        .Filter(f => f.Add(m => m.Position).Contains("designer"))
        .ServerOperation(false)
        .Model(m =>
        {
            m.Id(f => f.EmployeeId);
            m.ParentId(f => f.ReportsTo);
            m.Expanded(true);
            m.Field(f => f.FirstName);
            m.Field(f => f.LastName);
            m.Field(f => f.ReportsTo);
        })
    )
    .Events(e => e.ExcelExport("onExcelExportDesigners"))
    .Height(540)
)

<h3>Lead personnel</h3>
@(Html.Kendo().TreeList<Telerik.Examples.Mvc.Areas.TreeListExportingMultiple.Models.EmployeeDirectoryModel>()
    .Name("leads")
    .Columns(columns =>
    {
        columns.Add().Field(e => e.FirstName).Width(220);
        columns.Add().Field(e => e.LastName);
        columns.Add().Field(e => e.Position);
        columns.Add().Field(e => e.Address);
    })
    .Excel(excel => excel.FileName("Kendo UI TreeList Export.xlsx").ProxyURL(Url.Action("Excel_Export_Save")))
    .Filterable()
    .Sortable()
    .DataSource(dataSource => dataSource
        .Read(read => read.Action("All", "EmployeeDirectory"))
        .ServerOperation(false)
        .Filter(f => f.Add(m => m.Position).Contains("lead"))
        .Model(m =>
        {
            m.Id(f => f.EmployeeId);
            m.ParentId(f => f.ReportsTo);
            m.Expanded(true);
            m.Field(f => f.FirstName);
            m.Field(f => f.LastName);
            m.Field(f => f.ReportsTo);
        })
    )
    .Events(e => e.ExcelExport("onExcelExportLead"))
    .Height(540)
)

<script>
    function onExcelExportDesigners(e) {
        e.preventDefault();

        promises[0].resolve(e.workbook);
    }

    function onExcelExportLead(e) {
        e.preventDefault();

        promises[1].resolve(e.workbook);
    }

    // used to sync the exports
    var promises = [
        $.Deferred(),
        $.Deferred()
    ];

    $("#export").click(function (e) {
        // trigger export of the products grid
        $("#designers").data("kendoTreeList").saveAsExcel();
        // trigger export of the orders grid
        $("#leads").data("kendoTreeList").saveAsExcel();
        // wait for both exports to finish
        $.when.apply(null, promises)
            .then(function (designersWorkbook, leadsWorkbook) {

                // create a new workbook using the sheets of the products and orders workbooks
                var sheets = [
                    designersWorkbook.sheets[0],
                    leadsWorkbook.sheets[0]
                ];

                sheets[0].title = "Designers";
                sheets[1].title = "Leads";

                var workbook = new kendo.ooxml.Workbook({
                    sheets: sheets
                });

                promises = [
                    $.Deferred(),
                    $.Deferred()
                ];

                // save the new workbook,b
                kendo.saveAs({
                    dataURI: workbook.toDataURL(),
                    fileName: "DesignersAndLeaders.xlsx"
                })
            });
    });
</script>