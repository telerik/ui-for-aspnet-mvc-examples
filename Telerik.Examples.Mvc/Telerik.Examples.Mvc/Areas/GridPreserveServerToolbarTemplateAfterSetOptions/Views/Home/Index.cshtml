@using Kendo.Mvc.UI
@using Telerik.Examples.Mvc.Areas.GridPreserveServerToolbarTemplateAfterSetOptions.Models

@{
    var culture = System.Globalization.CultureInfo.CurrentCulture.ToString();
}

@helper ToolbarTemplate()
{
    <a class="k-button k-button-solid k-button-md k-rounded-md k-button-solid-base k-grid-add" href="/Home/Read?grid-mode=insert"><span class="k-icon k-font-icon k-i-add"></span>Add</a>
    <button class="k-button k-button-solid k-button-md k-rounded-md k-button-solid-base k-grid-excel"><span class="k-icon k-font-icon k-i-excel"></span>Export to Excel</button>
    <button class="k-button k-button-solid k-button-md k-rounded-md k-button-solid-base k-grid-pdf"><span class="k-icon k-font-icon k-i-pdf"></span>Export to PDF</button>
    <a class="k-button k-button-solid k-button-md k-rounded-md k-button-solid-base savesetting" href="/"><span></span>Save Settings</a>
    <a class="k-button k-button-solid k-button-md k-rounded-md k-button-solid-base loadsetting" href="/"><span></span>Load Settings</a>
    @(Html.Kendo().DropDownList()
        .Name("ExampleEditor")
        .OptionLabel("- ExampleEditor -")
        .DataTextField("Text")
        .DataTextField("Value")
        .BindTo(new List<dynamic>() {
            new {Text = "Item 1", Value= "1"},
            new {Text = "Item 2", Value= "2"}
        })
        .Deferred()
    )
}

@helper HeaderTemplate()
{
    <span>My Template</span>
}

<script type="text/x-kendo-template" id="toolbarTemplate">
   @Html.Raw(@ToolbarTemplate().ToHtmlString().Replace("#", "\\#").Replace("</scr", "<\\/scr"))
</script>

<script type="text/x-kendo-template" id="headerTemplate">
   @Html.Raw(@HeaderTemplate().ToHtmlString().Replace("#", "\\#").Replace("</scr", "<\\/scr"))
</script>

@(Html.Kendo().Grid<Order>()
    .Name("grid")
    .Columns(columns =>
    {
        columns.Bound(p => p.OrderID).HeaderTemplate(@<text>@HeaderTemplate()</text>);
        columns.Bound(p => p.OrderDescription);
        columns.Bound(p => p.OrderDate).Format("{0:d}");
        columns.Bound(p => p.OrderTotal).Format("{0:c}");
        columns.Bound(p => p.IsCompleted);
        columns.Command(c =>
        {
            c.Edit();
            c.Destroy();
        });
    })
    .ToolBar(toolbar =>
    {
        toolbar.Template(@<text>@ToolbarTemplate()</text>);
    })
    .HtmlAttributes(new { style="height: 500px;" })
    .Editable(editable => editable.Mode(GridEditMode.InLine))
    .Pageable()
    .Sortable()
    .Scrollable()
    .Filterable()
    .DataSource(dataSource => dataSource
        .Ajax()
        .ServerOperation(true)
        .Model(model =>
        {
            model.Id(p => p.OrderID);
            model.Field(p => p.OrderID).Editable(false);
        })
        .Events(e => e.RequestEnd("onRequestEnd"))
        .Create(create => create.Action("Create", "Home").Data("sendCulture"))
        .Destroy(destroy => destroy.Action("Delete", "Home").Data("sendCulture"))
        .Read(read => read.Action("Read", "Home").Data("sendCulture"))
        .Update(update => update.Action("Update", "Home").Data("sendCulture"))
    )
)

<script id="toolbar-nested-components-script">
      @Html.Kendo().DeferredScripts(false)
</script>

<script>
    $("#grid").on("click", ".savesetting", function (e) {
        var grid = $(this).closest("[data-role=grid]").data("kendoGrid");
        e.preventDefault();
        localStorage["settings"] = kendo.stringify(grid.getOptions());
    });

    $("#grid").on("click", ".loadsetting", function (e) {
        var grid = $(this).closest("[data-role=grid]").data("kendoGrid");
        e.preventDefault();
        var options = localStorage["settings"];
        if (options) {
            var parsedOptions = JSON.parse(options);
            parsedOptions.toolbar = [
                { template: $("#toolbarTemplate").html() }
            ];
            parsedOptions.columns[0].headerTemplate = $("#headerTemplate").html();
            grid.setOptions(parsedOptions);
            //evaluate the scripts of any components nested in the toolbar and deferred
            eval($("#toolbar-nested-components-script").html());
        }
    });

    //convert dates to UTC
    function onRequestEnd(e) {
        if (e.type == "read") {
            var offsetMiliseconds = new Date().getTimezoneOffset() * 60000;
            var orders = e.response.Data;
            for (var i = 0; i < orders.length; i++) {
                orders[i].OrderDate = orders[i].OrderDate.replace(/\d+/,
                    function (n) { return parseInt(n) + offsetMiliseconds }
                 );
            }
        }
    }

    //send current culture with all ajax requests
    function sendCulture() {
        return { culture: "@culture" }
    }
</script>
