@{
    ViewBag.Title = "Home Page";
}

@(Html.Kendo().Grid<Telerik.Examples.Mvc.Areas.ODataWebApiWrappers.Models.ODataWebApiWrappersProduct>()
    .Name("products")
    .Columns(columns =>
    {
        columns.Bound(e => e.ProductName).Width(200);
        columns.Bound(e => e.ProductID).Width(300);
        columns.Bound(e => e.UnitPrice).Width(300);
        columns.Bound(e => e.UnitsOnOrder).Width(300);
        columns.Bound(e => e.Discontinued).Width(200);
        columns.Command(cmd => cmd.Edit()).Width(300);
    })
    .Scrollable()
    .ToolBar(tb => {
        tb.Create();
        tb.Save();
        })
    .DataSource(dataSource => dataSource
        .Custom()
        .Batch(true)
        .Schema(sch =>
        {
            sch.Model(m=>{
                m.Id("ProductID");
                m.Field(f=>f.ProductID).Editable(false);
                m.Field("UnitPrice", typeof(Decimal));
            });
        })
        .Type("odata-v4")
        .Transport(t =>
        {
            t.Read(new { url = new Kendo.Mvc.ClientHandlerDescriptor() { HandlerName = "readProduct" } });
            t.Update(new { url = new Kendo.Mvc.ClientHandlerDescriptor() { HandlerName = "updateProduct" } });
            t.Create(new { url = new Kendo.Mvc.ClientHandlerDescriptor() { HandlerName = "createProduct" } });
            t.Destroy(new { url = new Kendo.Mvc.ClientHandlerDescriptor() { HandlerName = "destroyProduct" } });
            t.Batch(new { url = new Kendo.Mvc.ClientHandlerDescriptor() { HandlerName = "batchProduct" } });
        })
        .Events(ev => ev.RequestEnd("onRequestEnd"))
        .PageSize(20)
        .ServerPaging(true)
        .ServerSorting(true)
        .ServerFiltering(true)
    )
    .Sortable()
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Pageable()
    .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
)
<br />
<br />
@(Html.Kendo().Grid<Telerik.Examples.Mvc.Areas.ODataWebApiWrappers.Models.ODataWebApiWrappersEmployee>()
    .Name("employees")
    .Columns(columns =>
    {
        columns.Bound(e => e.FirstName).Width(200);
        columns.Bound(e => e.LastName).Width(300);
        columns.Bound(e => e.BirthDate).EditorTemplateName("DateTimeOffset").Format("{0: MM/dd/yyyy}").Width(300);
    })
    .Scrollable()
    .ToolBar(tb =>
    {
            tb.Create();
            tb.Save();
    })
    .DataSource(dataSource => dataSource
        .Custom()
        .Batch(true)
        .Schema(sch =>
        {
            sch.Model(m => {
                m.Id("EmployeeID");
                m.Field("BirthDate", typeof(DateTime));
            });
        })
        .Type("odata-v4")
        .Transport(transport => {
            transport.Read(read => read.Url("https://demos.telerik.com/kendo-ui/service-v4/odata/Employees"));
        }
        )
        .Transport(t =>
        {
            t.Read(new { url = new Kendo.Mvc.ClientHandlerDescriptor() { HandlerName = "readEmployee" } });
            t.Update(new { url = new Kendo.Mvc.ClientHandlerDescriptor() { HandlerName = "updateEmployee" } });
            t.Create(new { url = new Kendo.Mvc.ClientHandlerDescriptor() { HandlerName = "createEmployee" } });
            t.Destroy(new { url = new Kendo.Mvc.ClientHandlerDescriptor() { HandlerName = "destroyEmployee" } });
            t.Batch(new { url = new Kendo.Mvc.ClientHandlerDescriptor() { HandlerName = "batchEmployee" } });
        })
        .Events(ev => ev.RequestEnd("onRequestEnd"))
        .PageSize(20)
        .ServerPaging(true)
        .ServerSorting(true)
        .ServerFiltering(true)
    )
    .Sortable()
    .Pageable()
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
)

<script>
    function onRequestEnd(e) { //this is no longer needed in latest after Q3 internal build
        if (e.type == "create") {
            delete e.response["@@odata.context"];
        }
    }

    function batchProduct() {
        return "https://demos.telerik.com/kendo-ui/service-v4/odata/$batch";
    }

    function readProduct() {
        return "https://demos.telerik.com/kendo-ui/service-v4/odata/Products";
    }

    function updateProduct(dataItem) {
        return "https://demos.telerik.com/kendo-ui/service-v4/odata/Products(" + dataItem.ProductID + ")";
    }

    function createProduct(dataItem) {
        delete dataItem.ProductID;
        return "https://demos.telerik.com/kendo-ui/service-v4/odata/Products";
    }

    function destroyProduct(dataItem) {
        return "https://demos.telerik.com/kendo-ui/service-v4/odata/Products(" + dataItem.ProductID + ")";
    }

    function batchEmployee() {
        return "https://demos.telerik.com/kendo-ui/service-v4/odata/$batch";
    }

    function readEmployee() {
        return "https://demos.telerik.com/kendo-ui/service-v4/odata/Employees";
    }

    function updateEmployee(dataItem) {
        return "https://demos.telerik.com/kendo-ui/service-v4/odata/Employees(" + dataItem.EmployeeID + ")";
    }

    function createEmployee(dataItem) {
        delete dataItem.EmployeeID;
        return "https://demos.telerik.com/kendo-ui/service-v4/odata/Employees";
    }

    function destroyEmployee(dataItem) {
        return "https://demos.telerik.com/kendo-ui/service-v4/odata/Employees(" + dataItem.EmployeeID + ")";
    }
</script>