@using Kendo.Mvc.UI

@using Telerik.Examples.Mvc.Areas.GridEditingPopUpTreeView.Models

@{
    ViewBag.Title = "Index";
}

@(Html.Kendo().Grid<GridEditingPopUpTreeViewProduct>()
      .Name("grid")
      .Columns(columns =>
      {
          columns.Bound(product => product.ProductID).Width(100);
          columns.Bound(product => product.ProductName);
          columns.Bound(product => product.UnitsInStock).Width(250);
          columns.Command(commands =>
          {
              commands.Edit(); // The "edit" command will edit and update data items
              commands.Destroy(); // The "destroy" command removes data items
          }).Title("Commands").Width(200);
      })
      .Events(e => e.Edit("onEdit"))
      .ToolBar(toolbar => toolbar.Create()) // The "create" command adds new data items
      .Editable(editable => editable.Mode(GridEditMode.PopUp)) // Use inline editing mode
      .DataSource(dataSource =>
          dataSource.Ajax()
            .Model(model =>
            {
                model.Id(product => product.ProductID); // Specify the property which is the unique identifier of the model
                model.Field(product => product.ProductID).Editable(false); // Make the ProductID property not editable
            })
            .Create(create => create.Action("Products_Create", "Home")) // Action invoked when the user saves a new data item
            .Read(read => read.Action("Products_Read", "Home"))  // Action invoked when the grid needs data
            .Update(update => update.Action("Products_Update", "Home"))  // Action invoked when the user saves an updated data item
            .Destroy(destroy => destroy.Action("Products_Destroy", "Home")) // Action invoked when the user removes a data item
      )
      .Pageable()
)
<script>
    function onEdit(e) {
        var currentValue = e.container.find("input[name='ProductName']").val();
        var model = e.model;
        $("#ProductName").parent().append("<div class='treeView'></div>");
        $("#ProductName").remove();
        $(".treeView").kendoTreeView({
            animation: false,
            dataSource: [
                {
                    text: "product 0"
                },
                {
                    text: "product 1",
                    items: [
                        { text: "product 2" },
                        { text: "product 3" },
                        { text: "product 4" }
                    ]
                }
            ]
        });
        if (currentValue) {
            var treeView = $(e.container).find(".treeView").data("kendoTreeView");
            var originalItem = treeView.findByText(currentValue);
            if (originalItem != null) {
                treeView.select(originalItem);
            }
        }
        $(".treeView").find(".k-treeview-leaf").mousedown(function (e) {
            var clickedNode = $(e.toElement).closest("[role=treeitem]");
            var dataItem = treeView.dataItem(clickedNode);
            model.set("ProductName", dataItem.text);
        });
    }
</script>

