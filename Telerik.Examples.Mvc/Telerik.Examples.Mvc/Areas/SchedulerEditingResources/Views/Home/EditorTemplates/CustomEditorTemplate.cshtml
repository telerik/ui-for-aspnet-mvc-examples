@model Telerik.Examples.Mvc.Areas.SchedulerEditingResources.Models.MeetingViewModel
@{
    //required in order to render validation attributes
    ViewContext.FormContext = new FormContext();
}

@functions{
    public Dictionary<string, object> generateDatePickerAttributes(
           string elementId,
           string fieldName,
           string dataBindAttribute,
           Dictionary<string, object> additionalAttributes = null)
    {

        Dictionary<string, object> datePickerAttributes = additionalAttributes != null ? new Dictionary<string, object>(additionalAttributes) : new Dictionary<string, object>();

        datePickerAttributes["id"] = elementId;
        datePickerAttributes["name"] = fieldName;
        datePickerAttributes["data-bind"] = dataBindAttribute;
        datePickerAttributes["required"] = "required";
        datePickerAttributes["style"] = "z-index: inherit;";

        return datePickerAttributes;
    }
}

<div class="k-edit-label">
    @(Html.LabelFor(model => model.Title))
</div>
<div data-container-for="title" class="k-edit-field">
    @(Html.TextBoxFor(model => model.Title, new { @class = "k-textbox", data_bind = "value:title" }))
</div>

<div class="k-edit-label">
    @(Html.LabelFor(model => model.Start))
</div>
<div data-container-for="start" class="k-edit-field">

    @(Html.Kendo().DateTimePickerFor(model => model.Start)
        .HtmlAttributes(generateDatePickerAttributes("startDateTime", "start", "value:start,invisible:isAllDay")))

    @(Html.Kendo().DatePickerFor(model => model.Start)
        .HtmlAttributes(generateDatePickerAttributes("startDate", "start", "value:start,visible:isAllDay")))

    <span data-bind="text: startTimezone"></span>
    <span data-for="start" class="k-invalid-msg"></span>
</div>

<div class="k-edit-label">
    @(Html.LabelFor(model => model.End))
</div>
<div data-container-for="end" class="k-edit-field">

    @(Html.Kendo().DateTimePickerFor(model => model.End)
        .HtmlAttributes(generateDatePickerAttributes(
            "endDateTime",
            "end",
            "value:end,invisible:isAllDay",
            new Dictionary<string, object>() {{"data-dateCompare-msg", "End date should be greater than or equal to the start date"}})))
        
    @(Html.Kendo().DatePickerFor(model => model.End)
        .HtmlAttributes(generateDatePickerAttributes(
            "endDate", 
            "end", 
            "value:end,visible:isAllDay",
            new Dictionary<string, object>() {{"data-dateCompare-msg", "End date should be greater than or equal to the start date"}})))

    <span data-bind="text: endTimezone"></span>
    <span data-for="end" class="k-invalid-msg"></span>
</div>

<div class="k-edit-label">
    @(Html.LabelFor(model => model.IsAllDay))
</div>
<div data-container-for="isAllDay" class="k-edit-field">
    <input name="isAllDay" type="checkbox" data-bind = "checked:isAllDay" />
</div>


<div class="endTimezoneRow">
    <div class="k-edit-label"></div>
    <div class="k-edit-field">
        <label class="k-check">
            <input checked="checked" class="k-timezone-toggle" type="checkbox" value="true" />
            Use separate start and end time zones
        </label>
    </div>
</div>
<script>
    $(".k-timezone-toggle").on("click", function () {
        var isVisible = $(this).is(":checked");
        var container = $(this).closest(".k-popup-edit-form");

        var endTimezoneRow = container.find("label[for='EndTimezone']").parent().add(container.find("div[data-container-for='endTimezone']"));
        endTimezoneRow.toggle(isVisible);

        if (!isVisible) {
            var uid = container.attr("data-uid");
            var scheduler = $("\#scheduler").data("kendoScheduler");
            var model = scheduler.dataSource.getByUid(uid);
            model.set("endTimezone", null);
        }
    });

    var endTimezone = '${data.endTimezone}';

    if (!endTimezone || endTimezone == "null") {
        $(".k-timezone-toggle").trigger('click');
    }
</script>

<div class="k-edit-label">
    @(Html.LabelFor(model => model.StartTimezone))
</div>
<div data-container-for="startTimezone" class="k-edit-field">
    @(Html.Kendo().TimezoneEditorFor(model => model.StartTimezone)
        .HtmlAttributes(new { data_bind = "value:startTimezone" }))
</div>

<div class="k-edit-label">
    @(Html.LabelFor(model => model.EndTimezone))
</div>
<div data-container-for="endTimezone" class="k-edit-field">
    @(Html.Kendo().TimezoneEditorFor(model => model.EndTimezone)
        .HtmlAttributes(new { data_bind = "value:endTimezone" }))
</div>

<div class="k-edit-label">
    @(Html.LabelFor(model => model.RecurrenceRule))
</div>
<div data-container-for="recurrenceRule" class="k-edit-field">
    @(Html.Kendo().RecurrenceEditorFor(model => model.RecurrenceRule)
        .HtmlAttributes(new { data_bind = "value:recurrenceRule" }))
</div>

<div class="k-edit-label">
    @(Html.LabelFor(model => model.Description))
</div>
<div data-container-for="description" class="k-edit-field">
    @(Html.TextAreaFor(model => model.Description, new { @class = "k-textbox", data_bind = "value:description" }))
</div>

<div class="k-edit-label">
    @(Html.LabelFor(model => model.RoomID))
</div>
<div data-container-for="RoomID" class="k-edit-field">
    @(Html.Kendo().DropDownListFor(model => model.RoomID)
        .HtmlAttributes(new { data_bind = "value:RoomID", style = "width: 200px" })
        .DataTextField("Text")
        .DataValueField("Value")
        .OptionLabel("None")
        .ValuePrimitive(true)
        .Template("<span class='k-scheduler-mark' style='background-color:\\#= data.Color?Color:'' \\#'></span>\\#=Text\\#")
        .BindTo(new[] { 
                new { Text = "Meeting Room 101", Value = 1, Color = "\\#6eb3fa" },
                new { Text = "Meeting Room 201", Value = 2, Color = "\\#f58a8a" } 
            }).ToClientTemplate()
    )
</div>

<div class="k-edit-label">
    @(Html.LabelFor(model => model.Attendees))
</div>

<div data-container-for="Attendees" class="k-edit-field">
    <hr />
    <div style="width: 280px; display: inline-block">
        @(Html.Kendo().MultiSelectFor(model => model.Attendees)
            .HtmlAttributes(new { data_bind = "value:Attendees"})
            .DataTextField("Text")
            .DataValueField("Value")
            .ValuePrimitive(true)
            .TagTemplate("<span class='k-scheduler-mark' style='background-color:\\#= data.Color?Color:'' \\#'></span>\\#=Text\\#")
            .ItemTemplate("<span class='k-scheduler-mark' style='background-color:\\#= data.Color?Color:'' \\#'></span>\\#=Text\\#")
            .DataSource(ds => ds
                .Custom()
                .Type("aspnetmvc-ajax")
                .Transport(transport => transport.Read(read => read.Action("Read_Attendees", "Home")))
                .Schema(schema => schema
                    .Data("Data")
                    .Total("Total")
                    .Errors("Errors")
                    .Model(model =>
                    {
                        model.Id("Value");
                        model.Field("Value", typeof(int));
                        model.Field("Text", typeof(string));
                        model.Field("Color", typeof(string));
                    })
                )
            ))
    </div>

    <button class="k-button" style="float:right;" id="editAttendees">Edit attendees</button>

    <div id="insertNewAttendeeDialog">
        <div id="editResources"></div>
        <em>* closing the window will cancel the changes</em>
        @(Html.Kendo().Grid<Telerik.Examples.Mvc.Areas.SchedulerEditingResources.Models.Attendee>()
            .Name("AttendeeEditor")
            .Columns(columns => {
                columns.Bound(p => p.Value).Width(100);
                columns.Bound(p => p.Text).Width(100);
                columns.Bound(p => p.Color).Width(100);
                columns.Command(command => command.Destroy()).Width(100);
            })
            .Navigatable()
            .ToolBar(toolbar => {
                toolbar.Create();
            })
            .Editable(editable => editable.Mode(GridEditMode.InCell))
            .DataSource(ds => ds.Ajax()
                .Model(model =>
                {
                    model.Id(m => m.Value);
                    model.Field(m => m.Value).Editable(false);
                })
                .Read(read => read.Action("Read_Attendees", "Home"))
                .Create(create => create.Action("Create_Attendees", "Home"))
                .Destroy(destroy => destroy.Action("Destroy_Attendees", "Home"))
                .Update(update => update.Action("Update_Attendees", "Home"))
            ).ToClientTemplate()
        )
        <br />
        <button id='saveAttendees' class="k-button">Save changes</button>
        <button id='cancelAttendees' class="k-button">Cancel changes</button>
    </div>
    <hr />
</div>

<script>
    function destroyDialog() {
        var dialogElement = $(document.getElementById("insertNewAttendeeDialog"));
        dialogElement.getKendoWindow().destroy();
        dialogElement.remove();
    }

    (function () {
        var grid = $(document.getElementById("AttendeeEditor")).getKendoGrid();
        var multi = $(document.getElementById("Attendees")).getKendoMultiSelect();
        var scheduler = $(document.getElementById("scheduler")).getKendoScheduler();
        var dialog = $(document.getElementById("insertNewAttendeeDialog")).kendoWindow({
            title: "Insert New Attendee",
            modal: true,
            movable: true,
            visible: false,
            close: function () {
                /* cancel changes inside the grid */
                grid.cancelChanges();
            },
            open: function () {
                this.center();
                grid.dataSource.read();
            }
        }).getKendoWindow();

        $(document.getElementById("editAttendees")).on("click", function () {
            dialog.open();
        });

        $(document.getElementById("cancelAttendees")).on("click", function () {
            dialog.close();
        });

        $(document.getElementById("saveAttendees")).on("click", function () {
            grid.dataSource.sync().then(function () {
                dialog.close();

                multi.dataSource.read();

                /* the index of the resource that was edited */
                var resourceIndex = 1;
                scheduler.resources[resourceIndex].dataSource.read();
            });
        });
    })();
</script>
@{
    ViewContext.FormContext = null;
}