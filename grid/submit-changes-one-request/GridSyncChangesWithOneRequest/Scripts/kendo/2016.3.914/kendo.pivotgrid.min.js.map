{"version":3,"sources":["kendo.pivotgrid.js"],"names":["f","define","$","undefined","normalizeMeasures","measure","descriptor","name","descriptors","toString","call","map","d","type","normalizeMembers","member","expand","slice","normalizeName","indexOf","accumulateMembers","accumulator","rootTuple","tuple","level","idx","length","children","members","kendo","stringify","buildPath","descriptorsForAxes","tuples","k","result","push","parseJSON","addMissingPathMembers","axis","tupleMembers","found","j","firstTuple","getName","hierarchy","tupleToDescriptors","descriptorsForMembers","measures","tupletoSearch","MEASURES","findExistingTuple","createAggregateGetter","m","measureGetter","getter","field","aggregatorContext","state","aggregate","dataItem","isNumber","val","isNaN","isDate","getTime","addEmptyDataItem","value","fmtValue","ordinal","validateAxis","newAxis","membersCount","adjustDataByColumn","sourceTuples","targetTuples","rowsLength","data","columnIdx","rowIdx","dataIdx","columnsLength","targetColumnsLength","measuresLength","tupleIndex","adjustDataByRow","collection","index","queue","current","shift","apply","normalizeAxis","findDataIndex","memberIndex","counter","Math","max","mergeTuples","target","source","targetMembers","sourceMembers","parsedRoot","equalTuples","first","second","equal","toFind","membersLength","addMembers","i","len","path","findParentMember","parentMember","parentPath","parentName","measurePosition","normalizeTupleMeasures","extend","dataIndex","splice","parseSource","measureIndex","prepareDataOnRows","indices","rowIndex","columnIndex","targetIndex","sourceIndex","calcIndex","buildDataIndices","parseInt","prepareDataOnColumns","spliceIndex","concat","baseHierarchyPath","memberName","parts","split","expandMemberDescriptor","names","sort","sortDescriptor","sortDescriptorForMember","dir","crossJoin","r","pop","crossJoinCommand","tmp","measureNames","join","getRootNames","mapNames","rootNames","rootName","rootLength","expandedIdx","uniquePath","parseDescriptors","l","hierarchyName","expanded","child","root","serializeMembers","crossJoinCommands","command","serializeExpression","expression","operator","format","filterFunctionFormats","serializeFilters","filter","cube","filters","serializeOptions","parentTagName","options","capitalize","key","replace","toUpperCase","asArray","object","translateAxis","memberIdx","captionGetter","unameGetter","levelNameGetter","levelNumGetter","childrenGetter","hierarchyGetter","parentNameGetter","Member","caption","levelName","levelNum","hasChildren","xmlaDiscoverCommands","convertersMap","XmlaTransport","schemaDataReaderMap","xmlaReaderMethods","XmlaDataReader","sortExpr","removeExpr","PivotGrid","element","htmlNode","createMetadata","tupleName","ColumnBuilder","RowBuilder","ContentBuilder","PivotExcelMixin","window","ui","Class","Widget","DataSource","identity","o","isFunction","CHANGE","ERROR","PROGRESS","STATERESET","AUTO","DIV","NS","ROW_TOTAL_KEY","DATABINDING","DATABOUND","EXPANDMEMBER","COLLAPSEMEMBER","STATE_EXPANDED","STATE_COLLAPSED","HEADER_TEMPLATE","KPISTATUS_TEMPLATE","KPITREND_TEMPLATE","DATACELL_TEMPLATE","LAYOUT_TABLE","functions","sum","count","average","min","PivotCubeBuilder","init","this","dimensions","_normalizeDescriptors","keyField","fields","_rootTuples","measureAggregators","aggregatorsLength","dimensionsSchema","measureIdx","rootNamesLength","keys","_expandedTuples","mapItem","currentKeys","memberInfo","expandedNames","accumulatorKeys","_findExpandedMember","_asTuples","rootInfo","expandedInfo","_measuresInfo","rowAxis","aggregateNames","resultFuncs","formats","_toDataArray","measuresInfo","rowKeys","columnKeys","aggregates","n","row","column","columnKey","columnMeasureNames","rowMeasureNamesLength","rowMeasureNames","rowLength","columnLength","items","_addData","resultFunc","_matchDescriptors","getters","parentField","expectedValue","_calculateAggregate","totalItem","aggregator","_processColumns","columns","rowTotal","updateColumn","_measureAggregators","defaultAggregate","measureDescriptors","aggregators","toLowerCase","Error","_buildGetters","_parseDescriptors","parsedDescriptors","_filter","expr","_normalizeFilter","Query","logic","process","measuresRowAxis","columnDescriptors","rowDescriptors","aggregatedData","rows","rowValue","columnGetters","rowGetters","processed","expandedColumns","expandedRows","hasExpandedRows","rowDescriptor","rowName","columnsInfo","rowsInfo","measuresAxis","axes","PivotTransport","transport","discover","read","update","create","destroy","success","catalog","connection","PivotDataSource","schema","cubes","catalogs","hierarchies","levels","_cubeSchema","cubeBuilder","fn","_columns","_rows","values","_measures","_measuresAxis","_skipNormalize","_axes","uniqueName","defaultHierarchy","proxy","response","restrictions","levelUniqueName","memberUniqueName","schemaData","dataGetter","_rawData","distinct","treeOp","childrenCardinality","dimensionUniqueName","hierarchyUniqueName","serverSorting","serverPaging","serverFiltering","serverGrouping","serverAggregates","_mergeState","_clearAxesData","query","rowsAxisDescriptors","columnsAxisDescriptors","_expandPath","origin","other","memberToExpand","_lastExpanded","_descriptorsForAxis","_query","_process","e","_view","trigger","that","page","pageSize","group","_data","_params","_updateLocalData","_pristineData","Deferred","resolve","promise","expandColumn","expandRow","originalData","reader","_processResult","processedData","columnIndexes","rowIndexes","resultAxis","axisToSkip","hasColumnTuples","_requestData","_rowMeasures","_normalizeTuples","_columnMeasures","_normalizeData","_mergeAxes","_readData","newData","_createTuple","buildRoot","_hasRoot","isRoot","sourceAxes","startIndex","mergedColumns","mergedRows","offset","columnMeasures","rowMeasures","oldRowsLength","newRowsLength","oldColumnsLength","newColumnsLength","_mergeColumnData","_mergeRowData","toAdd","toJSON","drop","_observe","_ranges","_addRange","_total","_pristineTotal","last","roots","indexes","_addMissingDataItems","metadata","_normalizeOrdinals","lastOrdinal","converter","deferred","parse","_handleCustomErrors","error","status","reject","done","schemaMeasures","catalogName","cubeName","schemaKPIs","kpis","schemaDimensions","schemaHierarchies","dimensionName","schemaLevels","schemaCubes","schemaCatalogs","schemaMembers","dataSource","contains","doesnotcontain","startswith","endswith","eq","neq","properties","Catalog","RemoteTransport","originalOptions","url","setup","dataType","contentType","parameterMap","ajax","description","groupName","displayFolder","defaultFormat","goal","trend","statusGraphic","trendGraphic","defaultMember","orderingProperty","XmlDataReader","_extend","methodName","option","xml","errors","fault","faultstring","faultcode","cells","ordinalGetter","valueGetter","fmtValueGetter","_mapSchema","obj","transports","xmla","readers","expressions","PivotSettingTarget","addClass","_refreshHandler","refresh","template","ns","enabled","emptyTemplate","_sortable","on","closest","attr","hasClass","remove","sortable","currentTarget","find","filterable","fieldMenu","PivotFieldMenu","messages","setting","empty","setDataSource","unbind","kendoSortable","connectWith","hint","cursor","start","item","focus","blur","change","action","add","move","newIndex","_indexOf","_isKPI","validate","isMeasure","isArray","allowUnsort","skipExpr","html","sortIcon","_sortIcon","off","icon","columnBuilder","rowBuilder","_dataSource","_bindConfigurator","_wrapper","_createLayout","_columnBuilder","_rowBuilder","_contentBuilder","_templates","columnsHeader","rowsHeader","eventName","request","button","builder","eventArgs","parent","is","childrenLoaded","maxChildren","toggleClass","_scrollable","autoBind","fetch","notify","events","reorderable","height","columnWidth","configurator","columnHeaderTemplate","rowHeaderTemplate","dataCellTemplate","kpiStatusTemplate","kpiTrendTemplate","measureFields","columnFields","rowFields","columnTemplate","rowTemplate","dataTemplate","useWithBlock","kendoPivotConfigurator","cellInfoByElement","cellInfo","contentBuilder","columnInfo","rowInfo","columnTuple","rowTuple","view","measuresTarget","rowsTarget","columnsTarget","setOptions","clearTimeout","_headerReflowTimeout","_stateResetHandler","_progressHandler","_errorHandler","_requestStart","_stateReset","_error","bind","_progress","reset","wrapper","css","_measureFields","_createSettingTarget","icons","_initSettingTargets","layoutTable","leftContainer","rightContainer","gridWrapper","wrap","support","scrollbar","content","append","columnsHeaderTree","dom","Tree","rowsHeaderTree","contentTree","toggle","progress","_resize","firstChild","_setSectionsWidth","_setSectionsHeight","_setContentWidth","_setContentHeight","_columnHeaderReflow","columnTable","browser","mozilla","setTimeout","leftColumn","width","outerWidth","measureFieldsHeight","columnFieldsHeight","rowFieldsHeight","innerHeight","columnsHeight","padding","firstRowHeight","secondRowHeight","contentTable","calculatedWidth","minWidth","ceil","_resetColspan","skipScrollbar","offsetHeight","clientHeight","outerHeight","cell","_colspan","_layoutTimeout","_axisMeasures","hasMeasure","touchScroller","columnAxis","render","build","_indexes","contentResized","movable","scrollLeft","sender","x","scrollTop","y","scroll","_wheelScroll","delta","ctrlKey","wheelDeltaY","preventDefault","one","maxMembers","tbody","_tbody","colgroup","_colGroup","_rowLength","_buildRows","_normalize","cellsLength","cellIdx","rowSpan","tupleAll","_rowIndex","colSpan","_row","parentRow","rowKey","notFirst","collapsed","className","measureRow","_cell","_content","childRow","childrenLength","allCell","cellAttr","nextMember","cellChildren","memberCollapsed","rootLevelNum","maxcolSpan","allRow","firstMemberName","expandIconAttr","tuplePath","hasChild","axisInfo","total","axisInfoMember","skipChildren","firstEmpty","_buildRow","templateInfo","cellContent","startIdx","plugin","PivotExcelExporter","widget","columnHeaderTable","rowHeaderTable","columnHeaderLength","rowHeaderLength","autoWidth","_cells","callback","background","color","dataCallback","rowRows","columnHeaderRows","rowHeaderRows","contentRows","columnRows","_freezePane","colSplit","rowSplit","workbook","then","sheets","freezePane","proto","excel","saveAsExcel","proxyURL","fileName","exporter","book","ooxml","Workbook","saveAs","dataURI","toDataURL","forceProxy","prototype","PDFMixin","_drawPDF","_drawPDFShadow","avoidLinks","pdf","jQuery","amd","a1","a2","a3"],"mappings":"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","file":"kendo.pivotgrid.min.js","sourcesContent":["/*!\n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n\n*/\n(function (f, define) {\n    define('kendo.pivotgrid', [\n        'kendo.dom',\n        'kendo.data'\n    ], f);\n}(function () {\n    var __meta__ = {\n        id: 'pivotgrid',\n        name: 'PivotGrid',\n        category: 'web',\n        description: 'The PivotGrid widget is a data summarization tool.',\n        depends: [\n            'dom',\n            'data',\n            'data.xml',\n            'sortable'\n        ],\n        features: [\n            {\n                id: 'pivotgrid-configurator',\n                name: 'Configurator',\n                description: 'The PivotConfigurator widget allows the user to select data slices displayed in PivotGrid',\n                depends: ['pivot.configurator']\n            },\n            {\n                id: 'pivotgrid-filtering',\n                name: 'Filtering',\n                description: 'Support for filtering',\n                depends: ['pivot.fieldmenu']\n            },\n            {\n                id: 'pivotgrid-excel-export',\n                name: 'Excel export',\n                description: 'Export pivot grid data as Excel spreadsheet',\n                depends: ['ooxml']\n            },\n            {\n                id: 'pivotgrid-pdf-export',\n                name: 'PDF export',\n                description: 'Export pivot grid data as PDF',\n                depends: [\n                    'pdf',\n                    'drawing'\n                ]\n            },\n            {\n                id: 'mobile-scroller',\n                name: 'Mobile scroller',\n                description: 'Support for kinetic scrolling in mobile device',\n                depends: ['mobile.scroller']\n            }\n        ]\n    };\n    (function ($, undefined) {\n        var kendo = window.kendo, ui = kendo.ui, Class = kendo.Class, Widget = ui.Widget, DataSource = kendo.data.DataSource, toString = {}.toString, identity = function (o) {\n                return o;\n            }, map = $.map, extend = $.extend, isFunction = kendo.isFunction, CHANGE = 'change', ERROR = 'error', MEASURES = 'Measures', PROGRESS = 'progress', STATERESET = 'stateReset', AUTO = 'auto', DIV = '<div/>', NS = '.kendoPivotGrid', ROW_TOTAL_KEY = '__row_total__', DATABINDING = 'dataBinding', DATABOUND = 'dataBound', EXPANDMEMBER = 'expandMember', COLLAPSEMEMBER = 'collapseMember', STATE_EXPANDED = 'k-i-arrow-s', STATE_COLLAPSED = 'k-i-arrow-e', HEADER_TEMPLATE = '<span>#: data.member.caption || data.member.name #</span>', KPISTATUS_TEMPLATE = '<span class=\"k-icon k-i-kpi-#=data.dataItem.value > 0 ? \"open\" : data.dataItem.value < 0 ? \"denied\" : \"hold\"#\">#:data.dataItem.value#</span>', KPITREND_TEMPLATE = '<span class=\"k-icon k-i-kpi-#=data.dataItem.value > 0 ? \"increase\" : data.dataItem.value < 0 ? \"decrease\" : \"equal\"#\">#:data.dataItem.value#</span>', DATACELL_TEMPLATE = '#= data.dataItem ? kendo.htmlEncode(data.dataItem.fmtValue || data.dataItem.value) || \"&nbsp;\" : \"&nbsp;\" #', LAYOUT_TABLE = '<table class=\"k-pivot-layout\">' + '<tr>' + '<td>' + '<div class=\"k-pivot-rowheaders\"></div>' + '</td>' + '<td>' + '<div class=\"k-pivot-table k-state-default\"></div>' + '</td>' + '</tr>' + '</table>';\n        function normalizeMeasures(measure) {\n            var descriptor = typeof measure === 'string' ? [{ name: measure }] : measure;\n            var descriptors = toString.call(descriptor) === '[object Array]' ? descriptor : descriptor !== undefined ? [descriptor] : [];\n            return map(descriptors, function (d) {\n                if (typeof d === 'string') {\n                    return { name: d };\n                }\n                return {\n                    name: d.name,\n                    type: d.type\n                };\n            });\n        }\n        function normalizeMembers(member) {\n            var descriptor = typeof member === 'string' ? [{\n                    name: [member],\n                    expand: false\n                }] : member;\n            var descriptors = toString.call(descriptor) === '[object Array]' ? descriptor : descriptor !== undefined ? [descriptor] : [];\n            return map(descriptors, function (d) {\n                if (typeof d === 'string') {\n                    return {\n                        name: [d],\n                        expand: false\n                    };\n                }\n                return {\n                    name: toString.call(d.name) === '[object Array]' ? d.name.slice() : [d.name],\n                    expand: d.expand\n                };\n            });\n        }\n        function normalizeName(name) {\n            if (name.indexOf(' ') !== -1) {\n                name = '[\"' + name + '\"]';\n            }\n            return name;\n        }\n        function accumulateMembers(accumulator, rootTuple, tuple, level) {\n            var idx, length;\n            var children;\n            var member;\n            if (!tuple) {\n                tuple = rootTuple;\n            }\n            if (!level) {\n                level = 0;\n            }\n            member = tuple.members[level];\n            if (!member || member.measure) {\n                return;\n            }\n            children = member.children;\n            length = children.length;\n            if (tuple === rootTuple) {\n                accumulator[kendo.stringify([member.name])] = !!length;\n            } else if (length) {\n                accumulator[kendo.stringify(buildPath(tuple, level))] = true;\n            }\n            if (length) {\n                for (idx = 0; idx < length; idx++) {\n                    accumulateMembers(accumulator, rootTuple, children[idx], level);\n                }\n            }\n            accumulateMembers(accumulator, rootTuple, tuple, level + 1);\n        }\n        function descriptorsForAxes(tuples) {\n            var result = {};\n            if (tuples.length) {\n                accumulateMembers(result, tuples[0]);\n            }\n            var descriptors = [];\n            for (var k in result) {\n                descriptors.push({\n                    name: $.parseJSON(k),\n                    expand: result[k]\n                });\n            }\n            return descriptors;\n        }\n        function addMissingPathMembers(members, axis) {\n            var tuples = axis.tuples || [];\n            var firstTuple = tuples[0];\n            if (firstTuple && members.length < firstTuple.members.length) {\n                var tupleMembers = firstTuple.members;\n                for (var idx = 0; idx < tupleMembers.length; idx++) {\n                    if (tupleMembers[idx].measure) {\n                        continue;\n                    }\n                    var found = false;\n                    for (var j = 0; j < members.length; j++) {\n                        if (getName(members[j]).indexOf(tupleMembers[idx].hierarchy) === 0) {\n                            found = true;\n                            break;\n                        }\n                    }\n                    if (!found) {\n                        members.push({\n                            name: [tupleMembers[idx].name],\n                            expand: false\n                        });\n                    }\n                }\n            }\n        }\n        function tupleToDescriptors(tuple) {\n            var result = [];\n            var members = tuple.members;\n            for (var idx = 0; idx < members.length; idx++) {\n                if (members[idx].measure) {\n                    continue;\n                }\n                result.push({\n                    name: [members[idx].name],\n                    expand: members[idx].children.length > 0\n                });\n            }\n            return result;\n        }\n        function descriptorsForMembers(axis, members, measures) {\n            axis = axis || {};\n            addMissingPathMembers(members, axis);\n            if (measures.length > 1) {\n                members.push({\n                    name: MEASURES,\n                    measure: true,\n                    children: normalizeMembers(measures)\n                });\n            }\n            var tupletoSearch = { members: members };\n            if (axis.tuples) {\n                var result = findExistingTuple(axis.tuples, tupletoSearch);\n                if (result.tuple) {\n                    members = tupleToDescriptors(result.tuple);\n                }\n            }\n            return members;\n        }\n        function createAggregateGetter(m) {\n            var measureGetter = kendo.getter(m.field, true);\n            return function (aggregatorContext, state) {\n                return m.aggregate(measureGetter(aggregatorContext.dataItem), state, aggregatorContext);\n            };\n        }\n        function isNumber(val) {\n            return typeof val === 'number' && !isNaN(val);\n        }\n        function isDate(val) {\n            return val && val.getTime;\n        }\n        var functions = {\n            sum: function (value, state) {\n                var accumulator = state.accumulator;\n                if (!isNumber(accumulator)) {\n                    accumulator = value;\n                } else if (isNumber(value)) {\n                    accumulator += value;\n                }\n                return accumulator;\n            },\n            count: function (value, state) {\n                return (state.accumulator || 0) + 1;\n            },\n            average: {\n                aggregate: function (value, state) {\n                    var accumulator = state.accumulator;\n                    if (state.count === undefined) {\n                        state.count = 0;\n                    }\n                    if (!isNumber(accumulator)) {\n                        accumulator = value;\n                    } else if (isNumber(value)) {\n                        accumulator += value;\n                    }\n                    if (isNumber(value)) {\n                        state.count++;\n                    }\n                    return accumulator;\n                },\n                result: function (state) {\n                    var accumulator = state.accumulator;\n                    if (isNumber(accumulator)) {\n                        accumulator = accumulator / state.count;\n                    }\n                    return accumulator;\n                }\n            },\n            max: function (value, state) {\n                var accumulator = state.accumulator;\n                if (!isNumber(accumulator) && !isDate(accumulator)) {\n                    accumulator = value;\n                }\n                if (accumulator < value && (isNumber(value) || isDate(value))) {\n                    accumulator = value;\n                }\n                return accumulator;\n            },\n            min: function (value, state) {\n                var accumulator = state.accumulator;\n                if (!isNumber(accumulator) && !isDate(accumulator)) {\n                    accumulator = value;\n                }\n                if (accumulator > value && (isNumber(value) || isDate(value))) {\n                    accumulator = value;\n                }\n                return accumulator;\n            }\n        };\n        var PivotCubeBuilder = Class.extend({\n            init: function (options) {\n                this.options = extend({}, this.options, options);\n                this.dimensions = this._normalizeDescriptors('field', this.options.dimensions);\n                this.measures = this._normalizeDescriptors('name', this.options.measures);\n            },\n            _normalizeDescriptors: function (keyField, descriptors) {\n                descriptors = descriptors || {};\n                var fields = {};\n                var field;\n                if (toString.call(descriptors) === '[object Array]') {\n                    for (var idx = 0, length = descriptors.length; idx < length; idx++) {\n                        field = descriptors[idx];\n                        if (typeof field === 'string') {\n                            fields[field] = {};\n                        } else if (field[keyField]) {\n                            fields[field[keyField]] = field;\n                        }\n                    }\n                    descriptors = fields;\n                }\n                return descriptors;\n            },\n            _rootTuples: function (rootNames, measureAggregators) {\n                var aggregatorsLength = measureAggregators.length || 1;\n                var dimensionsSchema = this.dimensions || [];\n                var root, name, parts;\n                var measureIdx = 0;\n                var idx;\n                var rootNamesLength = rootNames.length;\n                var result = [];\n                var keys = [];\n                if (rootNamesLength || measureAggregators.length) {\n                    for (measureIdx = 0; measureIdx < aggregatorsLength; measureIdx++) {\n                        root = { members: [] };\n                        for (idx = 0; idx < rootNamesLength; idx++) {\n                            name = rootNames[idx];\n                            parts = name.split('&');\n                            root.members[root.members.length] = {\n                                children: [],\n                                caption: (dimensionsSchema[name] || {}).caption || 'All',\n                                name: name,\n                                levelName: name,\n                                levelNum: '0',\n                                hasChildren: true,\n                                parentName: parts.length > 1 ? parts[0] : undefined,\n                                hierarchy: name\n                            };\n                        }\n                        if (aggregatorsLength > 1) {\n                            root.members[root.members.length] = {\n                                children: [],\n                                caption: measureAggregators[measureIdx].caption,\n                                name: measureAggregators[measureIdx].descriptor.name,\n                                levelName: 'MEASURES',\n                                levelNum: '0',\n                                hasChildren: false,\n                                parentName: undefined,\n                                hierarchy: 'MEASURES'\n                            };\n                        }\n                        result[result.length] = root;\n                    }\n                    keys.push(ROW_TOTAL_KEY);\n                }\n                return {\n                    keys: keys,\n                    tuples: result\n                };\n            },\n            _expandedTuples: function (map, expanded, measureAggregators) {\n                var aggregatorsLength = measureAggregators.length || 1;\n                var dimensionsSchema = this.dimensions || [];\n                var measureIdx;\n                var tuple;\n                var key;\n                var mapItem;\n                var current;\n                var currentKeys;\n                var accumulator = [];\n                var accumulatorKeys = [];\n                var memberInfo;\n                var expandedNames;\n                var parts;\n                var name;\n                var idx;\n                for (key in map) {\n                    mapItem = map[key];\n                    memberInfo = this._findExpandedMember(expanded, mapItem.uniquePath);\n                    current = accumulator[memberInfo.index] || [];\n                    currentKeys = accumulatorKeys[memberInfo.index] || [];\n                    expandedNames = memberInfo.member.names;\n                    for (measureIdx = 0; measureIdx < aggregatorsLength; measureIdx++) {\n                        tuple = { members: [] };\n                        for (idx = 0; idx < expandedNames.length; idx++) {\n                            if (idx === memberInfo.member.expandedIdx) {\n                                tuple.members[tuple.members.length] = {\n                                    children: [],\n                                    caption: mapItem.value,\n                                    name: mapItem.name,\n                                    hasChildren: false,\n                                    levelNum: 1,\n                                    levelName: mapItem.parentName + mapItem.name,\n                                    parentName: mapItem.parentName,\n                                    hierarchy: mapItem.parentName + mapItem.name\n                                };\n                                if (measureIdx === 0) {\n                                    currentKeys.push(buildPath(tuple, idx).join(''));\n                                }\n                            } else {\n                                name = expandedNames[idx];\n                                parts = name.split('&');\n                                tuple.members[tuple.members.length] = {\n                                    children: [],\n                                    caption: (dimensionsSchema[name] || {}).caption || 'All',\n                                    name: name,\n                                    levelName: name,\n                                    levelNum: '0',\n                                    hasChildren: true,\n                                    parentName: parts.length > 1 ? parts[0] : undefined,\n                                    hierarchy: name\n                                };\n                            }\n                        }\n                        if (aggregatorsLength > 1) {\n                            tuple.members[tuple.members.length] = {\n                                children: [],\n                                caption: measureAggregators[measureIdx].caption,\n                                name: measureAggregators[measureIdx].descriptor.name,\n                                levelName: 'MEASURES',\n                                levelNum: '0',\n                                hasChildren: true,\n                                parentName: undefined,\n                                hierarchy: 'MEASURES'\n                            };\n                        }\n                        current[current.length] = tuple;\n                    }\n                    accumulator[memberInfo.index] = current;\n                    accumulatorKeys[memberInfo.index] = currentKeys;\n                }\n                return {\n                    keys: accumulatorKeys,\n                    tuples: accumulator\n                };\n            },\n            _findExpandedMember: function (members, parentName) {\n                for (var idx = 0; idx < members.length; idx++) {\n                    if (members[idx].uniquePath === parentName) {\n                        return {\n                            member: members[idx],\n                            index: idx\n                        };\n                    }\n                }\n            },\n            _asTuples: function (map, descriptor, measureAggregators) {\n                measureAggregators = measureAggregators || [];\n                var rootInfo = this._rootTuples(descriptor.root, measureAggregators);\n                var expandedInfo = this._expandedTuples(map, descriptor.expanded, measureAggregators);\n                return {\n                    keys: [].concat.apply(rootInfo.keys, expandedInfo.keys),\n                    tuples: [].concat.apply(rootInfo.tuples, expandedInfo.tuples)\n                };\n            },\n            _measuresInfo: function (measures, rowAxis) {\n                var idx = 0;\n                var length = measures && measures.length;\n                var aggregateNames = [];\n                var resultFuncs = {};\n                var formats = {};\n                var descriptors = this.measures || {};\n                var measure;\n                var name;\n                for (; idx < length; idx++) {\n                    name = measures[idx].descriptor.name;\n                    measure = descriptors[name] || {};\n                    aggregateNames.push(name);\n                    if (measure.result) {\n                        resultFuncs[name] = measure.result;\n                    }\n                    if (measure.format) {\n                        formats[name] = measure.format;\n                    }\n                }\n                return {\n                    names: aggregateNames,\n                    formats: formats,\n                    resultFuncs: resultFuncs,\n                    rowAxis: rowAxis\n                };\n            },\n            _toDataArray: function (map, measuresInfo, rowKeys, columnKeys) {\n                var result = [];\n                var aggregates;\n                var name, i, j, k, n;\n                var row, column, columnKey;\n                var rowMeasureNamesLength = 1;\n                var rowMeasureNames = [];\n                var columnMeasureNames;\n                var rowLength = rowKeys.length || 1;\n                var columnLength = columnKeys.length || 1;\n                if (measuresInfo.rowAxis) {\n                    rowMeasureNames = measuresInfo.names;\n                    rowMeasureNamesLength = rowMeasureNames.length;\n                } else {\n                    columnMeasureNames = measuresInfo.names;\n                }\n                for (i = 0; i < rowLength; i++) {\n                    row = map[rowKeys[i] || ROW_TOTAL_KEY];\n                    for (n = 0; n < rowMeasureNamesLength; n++) {\n                        if (measuresInfo.rowAxis) {\n                            columnMeasureNames = [rowMeasureNames[n]];\n                        }\n                        for (j = 0; j < columnLength; j++) {\n                            columnKey = columnKeys[j] || ROW_TOTAL_KEY;\n                            column = row.items[columnKey];\n                            if (columnKey === ROW_TOTAL_KEY) {\n                                aggregates = row.aggregates;\n                            } else {\n                                aggregates = column ? column.aggregates : {};\n                            }\n                            for (k = 0; k < columnMeasureNames.length; k++) {\n                                name = columnMeasureNames[k];\n                                this._addData(result, aggregates[name], measuresInfo.formats[name], measuresInfo.resultFuncs[name]);\n                            }\n                        }\n                    }\n                }\n                return result;\n            },\n            _addData: function (result, value, format, resultFunc) {\n                var fmtValue = '';\n                var ordinal;\n                if (value) {\n                    value = resultFunc ? resultFunc(value) : value.accumulator;\n                    fmtValue = format ? kendo.format(format, value) : value;\n                }\n                ordinal = result.length;\n                result[ordinal] = {\n                    ordinal: ordinal,\n                    value: value || '',\n                    fmtValue: fmtValue\n                };\n            },\n            _matchDescriptors: function (dataItem, descriptor, getters) {\n                var parts;\n                var parentField;\n                var expectedValue;\n                var names = descriptor.names;\n                var idx = descriptor.expandedIdx;\n                var value;\n                while (idx > 0) {\n                    parts = names[--idx].split('&');\n                    if (parts.length > 1) {\n                        parentField = parts[0];\n                        expectedValue = parts[1];\n                        value = getters[parentField](dataItem);\n                        value = value !== undefined && value !== null ? value.toString() : value;\n                        if (value != expectedValue) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            },\n            _calculateAggregate: function (measureAggregators, aggregatorContext, totalItem) {\n                var result = {};\n                var state;\n                var name;\n                for (var measureIdx = 0; measureIdx < measureAggregators.length; measureIdx++) {\n                    name = measureAggregators[measureIdx].descriptor.name;\n                    state = totalItem.aggregates[name] || {};\n                    state.accumulator = measureAggregators[measureIdx].aggregator(aggregatorContext, state);\n                    result[name] = state;\n                }\n                return result;\n            },\n            _processColumns: function (measureAggregators, descriptors, getters, columns, aggregatorContext, rowTotal, state, updateColumn) {\n                var value;\n                var descriptor;\n                var column;\n                var totalItem;\n                var key, name, parentName, path;\n                var dataItem = aggregatorContext.dataItem;\n                var idx = 0;\n                for (; idx < descriptors.length; idx++) {\n                    descriptor = descriptors[idx];\n                    if (!this._matchDescriptors(dataItem, descriptor, getters)) {\n                        continue;\n                    }\n                    path = descriptor.names.slice(0, descriptor.expandedIdx).join('');\n                    name = descriptor.names[descriptor.expandedIdx];\n                    value = getters[name](dataItem);\n                    value = value !== undefined && value !== null ? value.toString() : value;\n                    parentName = name;\n                    name = name + '&' + value;\n                    key = path + name;\n                    column = columns[key] || {\n                        index: state.columnIndex,\n                        parentName: parentName,\n                        name: name,\n                        uniquePath: path + parentName,\n                        value: value\n                    };\n                    totalItem = rowTotal.items[key] || { aggregates: {} };\n                    rowTotal.items[key] = {\n                        index: column.index,\n                        aggregates: this._calculateAggregate(measureAggregators, aggregatorContext, totalItem)\n                    };\n                    if (updateColumn) {\n                        if (!columns[key]) {\n                            state.columnIndex++;\n                        }\n                        columns[key] = column;\n                    }\n                }\n            },\n            _measureAggregators: function (options) {\n                var measureDescriptors = options.measures || [];\n                var measures = this.measures || {};\n                var aggregators = [];\n                var descriptor, measure, idx, length;\n                var defaultAggregate, aggregate;\n                if (measureDescriptors.length) {\n                    for (idx = 0, length = measureDescriptors.length; idx < length; idx++) {\n                        descriptor = measureDescriptors[idx];\n                        measure = measures[descriptor.name];\n                        defaultAggregate = null;\n                        if (measure) {\n                            aggregate = measure.aggregate;\n                            if (typeof aggregate === 'string') {\n                                defaultAggregate = functions[aggregate.toLowerCase()];\n                                if (!defaultAggregate) {\n                                    throw new Error('There is no such aggregate function');\n                                }\n                                measure.aggregate = defaultAggregate.aggregate || defaultAggregate;\n                                measure.result = defaultAggregate.result;\n                            }\n                            aggregators.push({\n                                descriptor: descriptor,\n                                caption: measure.caption,\n                                result: measure.result,\n                                aggregator: createAggregateGetter(measure)\n                            });\n                        }\n                    }\n                } else {\n                    aggregators.push({\n                        descriptor: { name: 'default' },\n                        caption: 'default',\n                        aggregator: function () {\n                            return 1;\n                        }\n                    });\n                }\n                return aggregators;\n            },\n            _buildGetters: function (names) {\n                var result = {};\n                var parts;\n                var name;\n                for (var idx = 0; idx < names.length; idx++) {\n                    name = names[idx];\n                    parts = name.split('&');\n                    if (parts.length > 1) {\n                        result[parts[0]] = kendo.getter(parts[0], true);\n                    } else {\n                        result[name] = kendo.getter(normalizeName(name), true);\n                    }\n                }\n                return result;\n            },\n            _parseDescriptors: function (descriptors) {\n                var parsedDescriptors = parseDescriptors(descriptors);\n                var rootNames = getRootNames(parsedDescriptors.root);\n                var expanded = parsedDescriptors.expanded;\n                var result = [];\n                for (var idx = 0; idx < expanded.length; idx++) {\n                    result.push(mapNames(expanded[idx].name, rootNames));\n                }\n                return {\n                    root: rootNames,\n                    expanded: result\n                };\n            },\n            _filter: function (data, filter) {\n                if (!filter) {\n                    return data;\n                }\n                var expr;\n                var idx = 0;\n                var filters = filter.filters;\n                for (; idx < filters.length; idx++) {\n                    expr = filters[idx];\n                    if (expr.operator === 'in') {\n                        filters[idx] = this._normalizeFilter(expr);\n                    }\n                }\n                return new kendo.data.Query(data).filter(filter).data;\n            },\n            _normalizeFilter: function (filter) {\n                var value = filter.value.split(',');\n                var result = [];\n                if (!value.length) {\n                    return value;\n                }\n                for (var idx = 0; idx < value.length; idx++) {\n                    result.push({\n                        field: filter.field,\n                        operator: 'eq',\n                        value: value[idx]\n                    });\n                }\n                return {\n                    logic: 'or',\n                    filters: result\n                };\n            },\n            process: function (data, options) {\n                data = data || [];\n                options = options || {};\n                data = this._filter(data, options.filter);\n                var measures = options.measures || [];\n                var measuresRowAxis = options.measuresAxis === 'rows';\n                var columnDescriptors = options.columns || [];\n                var rowDescriptors = options.rows || [];\n                if (!columnDescriptors.length && rowDescriptors.length && (!measures.length || measures.length && measuresRowAxis)) {\n                    columnDescriptors = rowDescriptors;\n                    rowDescriptors = [];\n                    measuresRowAxis = false;\n                }\n                if (!columnDescriptors.length && !rowDescriptors.length) {\n                    measuresRowAxis = false;\n                }\n                if (!columnDescriptors.length && measures.length) {\n                    columnDescriptors = normalizeMembers(options.measures);\n                }\n                columnDescriptors = this._parseDescriptors(columnDescriptors);\n                rowDescriptors = this._parseDescriptors(rowDescriptors);\n                var aggregatedData = {};\n                var columns = {};\n                var rows = {};\n                var rowValue;\n                var state = { columnIndex: 0 };\n                var measureAggregators = this._measureAggregators(options);\n                var columnGetters = this._buildGetters(columnDescriptors.root);\n                var rowGetters = this._buildGetters(rowDescriptors.root);\n                var processed = false;\n                var expandedColumns = columnDescriptors.expanded;\n                var expandedRows = rowDescriptors.expanded;\n                var dataItem;\n                var aggregatorContext;\n                var hasExpandedRows = expandedRows.length !== 0;\n                var rowIdx, rowDescriptor, rowName, rowTotal;\n                var key, path, parentName, value;\n                var columnsInfo, rowsInfo;\n                var length = data.length;\n                var idx = 0;\n                if (columnDescriptors.root.length || rowDescriptors.root.length) {\n                    processed = true;\n                    for (idx = 0; idx < length; idx++) {\n                        dataItem = data[idx];\n                        aggregatorContext = {\n                            dataItem: dataItem,\n                            index: idx\n                        };\n                        rowTotal = aggregatedData[ROW_TOTAL_KEY] || {\n                            items: {},\n                            aggregates: {}\n                        };\n                        this._processColumns(measureAggregators, expandedColumns, columnGetters, columns, aggregatorContext, rowTotal, state, !hasExpandedRows);\n                        rowTotal.aggregates = this._calculateAggregate(measureAggregators, aggregatorContext, rowTotal);\n                        aggregatedData[ROW_TOTAL_KEY] = rowTotal;\n                        for (rowIdx = 0; rowIdx < expandedRows.length; rowIdx++) {\n                            rowDescriptor = expandedRows[rowIdx];\n                            if (!this._matchDescriptors(dataItem, rowDescriptor, rowGetters)) {\n                                this._processColumns(measureAggregators, expandedColumns, columnGetters, columns, aggregatorContext, {\n                                    items: {},\n                                    aggregates: {}\n                                }, state, true);\n                                continue;\n                            }\n                            path = rowDescriptor.names.slice(0, rowDescriptor.expandedIdx).join('');\n                            rowName = rowDescriptor.names[rowDescriptor.expandedIdx];\n                            parentName = rowName;\n                            rowValue = rowGetters[rowName](dataItem);\n                            rowValue = rowValue !== undefined ? rowValue.toString() : rowValue;\n                            rowName = rowName + '&' + rowValue;\n                            key = path + rowName;\n                            rows[key] = {\n                                uniquePath: path + parentName,\n                                parentName: parentName,\n                                name: rowName,\n                                value: rowValue\n                            };\n                            value = aggregatedData[key] || {\n                                items: {},\n                                aggregates: {}\n                            };\n                            this._processColumns(measureAggregators, expandedColumns, columnGetters, columns, aggregatorContext, value, state, true);\n                            value.aggregates = this._calculateAggregate(measureAggregators, aggregatorContext, value);\n                            aggregatedData[key] = value;\n                        }\n                    }\n                }\n                if (processed && length) {\n                    if (measureAggregators.length > 1 && (!options.columns || !options.columns.length)) {\n                        columnDescriptors = {\n                            root: [],\n                            expanded: []\n                        };\n                    }\n                    columnsInfo = this._asTuples(columns, columnDescriptors, measuresRowAxis ? [] : measureAggregators);\n                    rowsInfo = this._asTuples(rows, rowDescriptors, measuresRowAxis ? measureAggregators : []);\n                    columns = columnsInfo.tuples;\n                    rows = rowsInfo.tuples;\n                    aggregatedData = this._toDataArray(aggregatedData, this._measuresInfo(measureAggregators, measuresRowAxis), rowsInfo.keys, columnsInfo.keys);\n                } else {\n                    aggregatedData = columns = rows = [];\n                }\n                return {\n                    axes: {\n                        columns: { tuples: columns },\n                        rows: { tuples: rows }\n                    },\n                    data: aggregatedData\n                };\n            }\n        });\n        var PivotTransport = Class.extend({\n            init: function (options, transport) {\n                this.transport = transport;\n                this.options = transport.options || {};\n                if (!this.transport.discover) {\n                    if (isFunction(options.discover)) {\n                        this.discover = options.discover;\n                    }\n                }\n            },\n            read: function (options) {\n                return this.transport.read(options);\n            },\n            update: function (options) {\n                return this.transport.update(options);\n            },\n            create: function (options) {\n                return this.transport.create(options);\n            },\n            destroy: function (options) {\n                return this.transport.destroy(options);\n            },\n            discover: function (options) {\n                if (this.transport.discover) {\n                    return this.transport.discover(options);\n                }\n                options.success({});\n            },\n            catalog: function (val) {\n                var options = this.options || {};\n                if (val === undefined) {\n                    return (options.connection || {}).catalog;\n                }\n                var connection = options.connection || {};\n                connection.catalog = val;\n                this.options.connection = connection;\n                $.extend(this.transport.options, { connection: connection });\n            },\n            cube: function (val) {\n                var options = this.options || {};\n                if (val === undefined) {\n                    return (options.connection || {}).cube;\n                }\n                var connection = options.connection || {};\n                connection.cube = val;\n                this.options.connection = connection;\n                extend(true, this.transport.options, { connection: connection });\n            }\n        });\n        var PivotDataSource = DataSource.extend({\n            init: function (options) {\n                var cube = ((options || {}).schema || {}).cube;\n                var measuresAxis = 'columns';\n                var measures;\n                var schema = {\n                    axes: identity,\n                    cubes: identity,\n                    catalogs: identity,\n                    measures: identity,\n                    dimensions: identity,\n                    hierarchies: identity,\n                    levels: identity,\n                    members: identity\n                };\n                if (cube) {\n                    schema = $.extend(schema, this._cubeSchema(cube));\n                    this.cubeBuilder = new PivotCubeBuilder(cube);\n                }\n                DataSource.fn.init.call(this, extend(true, {}, { schema: schema }, options));\n                this.transport = new PivotTransport(this.options.transport || {}, this.transport);\n                this._columns = normalizeMembers(this.options.columns);\n                this._rows = normalizeMembers(this.options.rows);\n                measures = this.options.measures || [];\n                if (toString.call(measures) === '[object Object]') {\n                    measuresAxis = measures.axis || 'columns';\n                    measures = measures.values || [];\n                }\n                this._measures = normalizeMeasures(measures);\n                this._measuresAxis = measuresAxis;\n                this._skipNormalize = 0;\n                this._axes = {};\n            },\n            _cubeSchema: function (cube) {\n                return {\n                    dimensions: function () {\n                        var result = [];\n                        var dimensions = cube.dimensions;\n                        for (var key in dimensions) {\n                            result.push({\n                                name: key,\n                                caption: dimensions[key].caption || key,\n                                uniqueName: key,\n                                defaultHierarchy: key,\n                                type: 1\n                            });\n                        }\n                        if (cube.measures) {\n                            result.push({\n                                name: MEASURES,\n                                caption: MEASURES,\n                                uniqueName: MEASURES,\n                                type: 2\n                            });\n                        }\n                        return result;\n                    },\n                    hierarchies: function () {\n                        return [];\n                    },\n                    measures: function () {\n                        var result = [];\n                        var measures = cube.measures;\n                        for (var key in measures) {\n                            result.push({\n                                name: key,\n                                caption: key,\n                                uniqueName: key,\n                                aggregator: key\n                            });\n                        }\n                        return result;\n                    },\n                    members: $.proxy(function (response, restrictions) {\n                        var name = restrictions.levelUniqueName || restrictions.memberUniqueName;\n                        var schemaData = this.options.schema.data;\n                        var dataGetter = isFunction(schemaData) ? schemaData : kendo.getter(schemaData, true);\n                        var data = this.options.data && dataGetter(this.options.data) || this._rawData || [];\n                        var result = [];\n                        var getter;\n                        var value;\n                        var idx = 0;\n                        var distinct = {};\n                        if (name) {\n                            name = name.split('.')[0];\n                        }\n                        if (!restrictions.treeOp) {\n                            result.push({\n                                caption: cube.dimensions[name].caption || name,\n                                childrenCardinality: '1',\n                                dimensionUniqueName: name,\n                                hierarchyUniqueName: name,\n                                levelUniqueName: name,\n                                name: name,\n                                uniqueName: name\n                            });\n                            return result;\n                        }\n                        getter = kendo.getter(normalizeName(name), true);\n                        for (; idx < data.length; idx++) {\n                            value = getter(data[idx]);\n                            if ((value || value === 0) && !distinct[value]) {\n                                distinct[value] = true;\n                                result.push({\n                                    caption: value,\n                                    childrenCardinality: '0',\n                                    dimensionUniqueName: name,\n                                    hierarchyUniqueName: name,\n                                    levelUniqueName: name,\n                                    name: value,\n                                    uniqueName: value\n                                });\n                            }\n                        }\n                        return result;\n                    }, this)\n                };\n            },\n            options: {\n                serverSorting: true,\n                serverPaging: true,\n                serverFiltering: true,\n                serverGrouping: true,\n                serverAggregates: true\n            },\n            catalog: function (val) {\n                if (val === undefined) {\n                    return this.transport.catalog();\n                }\n                this.transport.catalog(val);\n                this._mergeState({});\n                this._axes = {};\n                this.data([]);\n            },\n            cube: function (val) {\n                if (val === undefined) {\n                    return this.transport.cube();\n                }\n                this.transport.cube(val);\n                this._axes = {};\n                this._mergeState({});\n                this.data([]);\n            },\n            axes: function () {\n                return this._axes;\n            },\n            columns: function (val) {\n                if (val === undefined) {\n                    return this._columns;\n                }\n                this._skipNormalize += 1;\n                this._clearAxesData = true;\n                this._columns = normalizeMembers(val);\n                this.query({\n                    columns: val,\n                    rows: this.rowsAxisDescriptors(),\n                    measures: this.measures()\n                });\n            },\n            rows: function (val) {\n                if (val === undefined) {\n                    return this._rows;\n                }\n                this._skipNormalize += 1;\n                this._clearAxesData = true;\n                this._rows = normalizeMembers(val);\n                this.query({\n                    columns: this.columnsAxisDescriptors(),\n                    rows: val,\n                    measures: this.measures()\n                });\n            },\n            measures: function (val) {\n                if (val === undefined) {\n                    return this._measures;\n                }\n                this._skipNormalize += 1;\n                this._clearAxesData = true;\n                this.query({\n                    columns: this.columnsAxisDescriptors(),\n                    rows: this.rowsAxisDescriptors(),\n                    measures: normalizeMeasures(val)\n                });\n            },\n            measuresAxis: function () {\n                return this._measuresAxis || 'columns';\n            },\n            _expandPath: function (path, axis) {\n                var origin = axis === 'columns' ? 'columns' : 'rows';\n                var other = axis === 'columns' ? 'rows' : 'columns';\n                var members = normalizeMembers(path);\n                var memberToExpand = getName(members[members.length - 1]);\n                this._lastExpanded = origin;\n                members = descriptorsForMembers(this.axes()[origin], members, this.measures());\n                for (var idx = 0; idx < members.length; idx++) {\n                    var memberName = getName(members[idx]);\n                    if (memberName === memberToExpand) {\n                        if (members[idx].expand) {\n                            return;\n                        }\n                        members[idx].expand = true;\n                    } else {\n                        members[idx].expand = false;\n                    }\n                }\n                var descriptors = {};\n                descriptors[origin] = members;\n                descriptors[other] = this._descriptorsForAxis(other);\n                this._query(descriptors);\n            },\n            _descriptorsForAxis: function (axis) {\n                var axes = this.axes();\n                var descriptors = this[axis]() || [];\n                if (axes && axes[axis] && axes[axis].tuples && axes[axis].tuples[0]) {\n                    descriptors = descriptorsForAxes(axes[axis].tuples || []);\n                }\n                return descriptors;\n            },\n            columnsAxisDescriptors: function () {\n                return this._descriptorsForAxis('columns');\n            },\n            rowsAxisDescriptors: function () {\n                return this._descriptorsForAxis('rows');\n            },\n            _process: function (data, e) {\n                this._view = data;\n                e = e || {};\n                e.items = e.items || this._view;\n                this.trigger(CHANGE, e);\n            },\n            _query: function (options) {\n                var that = this;\n                if (!options) {\n                    this._skipNormalize += 1;\n                    this._clearAxesData = true;\n                }\n                return that.query(extend({}, {\n                    page: that.page(),\n                    pageSize: that.pageSize(),\n                    sort: that.sort(),\n                    filter: that.filter(),\n                    group: that.group(),\n                    aggregate: that.aggregate(),\n                    columns: this.columnsAxisDescriptors(),\n                    rows: this.rowsAxisDescriptors(),\n                    measures: this.measures()\n                }, options));\n            },\n            query: function (options) {\n                var state = this._mergeState(options);\n                if (this._data.length && this.cubeBuilder) {\n                    this._params(state);\n                    this._updateLocalData(this._pristineData);\n                    return $.Deferred().resolve().promise();\n                }\n                return this.read(state);\n            },\n            _mergeState: function (options) {\n                options = DataSource.fn._mergeState.call(this, options);\n                if (options !== undefined) {\n                    this._measures = normalizeMeasures(options.measures);\n                    if (options.columns) {\n                        options.columns = normalizeMembers(options.columns);\n                    } else if (!options.columns) {\n                        this._columns = [];\n                    }\n                    if (options.rows) {\n                        options.rows = normalizeMembers(options.rows);\n                    } else if (!options.rows) {\n                        this._rows = [];\n                    }\n                }\n                return options;\n            },\n            filter: function (val) {\n                if (val === undefined) {\n                    return this._filter;\n                }\n                this._skipNormalize += 1;\n                this._clearAxesData = true;\n                this._query({\n                    filter: val,\n                    page: 1\n                });\n            },\n            expandColumn: function (path) {\n                this._expandPath(path, 'columns');\n            },\n            expandRow: function (path) {\n                this._expandPath(path, 'rows');\n            },\n            success: function (data) {\n                var originalData;\n                if (this.cubeBuilder) {\n                    originalData = (this.reader.data(data) || []).slice(0);\n                }\n                DataSource.fn.success.call(this, data);\n                if (originalData) {\n                    this._pristineData = originalData;\n                }\n            },\n            _processResult: function (data, axes) {\n                if (this.cubeBuilder) {\n                    var processedData = this.cubeBuilder.process(data, this._requestData);\n                    data = processedData.data;\n                    axes = processedData.axes;\n                }\n                var columnIndexes, rowIndexes;\n                var tuples, resultAxis, measures, axisToSkip;\n                var columnDescriptors = this.columns();\n                var rowDescriptors = this.rows();\n                var hasColumnTuples = axes.columns && axes.columns.tuples;\n                if (!columnDescriptors.length && rowDescriptors.length && hasColumnTuples && (this._rowMeasures().length || !this.measures().length)) {\n                    axes = {\n                        columns: {},\n                        rows: axes.columns\n                    };\n                }\n                if (!columnDescriptors.length && !rowDescriptors.length && this.measuresAxis() === 'rows' && hasColumnTuples) {\n                    axes = {\n                        columns: {},\n                        rows: axes.columns\n                    };\n                }\n                this._axes = {\n                    columns: normalizeAxis(this._axes.columns),\n                    rows: normalizeAxis(this._axes.rows)\n                };\n                axes = {\n                    columns: normalizeAxis(axes.columns),\n                    rows: normalizeAxis(axes.rows)\n                };\n                columnIndexes = this._normalizeTuples(axes.columns.tuples, this._axes.columns.tuples, columnDescriptors, this._columnMeasures());\n                rowIndexes = this._normalizeTuples(axes.rows.tuples, this._axes.rows.tuples, rowDescriptors, this._rowMeasures());\n                this._skipNormalize -= 1;\n                if (!this.cubeBuilder) {\n                    data = this._normalizeData({\n                        columnsLength: axes.columns.tuples.length,\n                        rowsLength: axes.rows.tuples.length,\n                        columnIndexes: columnIndexes,\n                        rowIndexes: rowIndexes,\n                        data: data\n                    });\n                }\n                if (this._lastExpanded == 'rows') {\n                    tuples = axes.columns.tuples;\n                    measures = this._columnMeasures();\n                    resultAxis = validateAxis(axes.columns, this._axes.columns, measures);\n                    if (resultAxis) {\n                        axisToSkip = 'columns';\n                        axes.columns = resultAxis;\n                        adjustDataByColumn(tuples, resultAxis.tuples, axes.rows.tuples.length, measures, data);\n                        if (!this.cubeBuilder) {\n                            data = this._normalizeData({\n                                columnsLength: membersCount(axes.columns.tuples, measures),\n                                rowsLength: axes.rows.tuples.length,\n                                data: data\n                            });\n                        }\n                    }\n                } else if (this._lastExpanded == 'columns') {\n                    tuples = axes.rows.tuples;\n                    measures = this._rowMeasures();\n                    resultAxis = validateAxis(axes.rows, this._axes.rows, measures);\n                    if (resultAxis) {\n                        axisToSkip = 'rows';\n                        axes.rows = resultAxis;\n                        adjustDataByRow(tuples, resultAxis.tuples, axes.columns.tuples.length, measures, data);\n                        if (!this.cubeBuilder) {\n                            data = this._normalizeData({\n                                columnsLength: membersCount(axes.rows.tuples, measures),\n                                rowsLength: axes.columns.tuples.length,\n                                data: data\n                            });\n                        }\n                    }\n                }\n                this._lastExpanded = null;\n                var result = this._mergeAxes(axes, data, axisToSkip);\n                this._axes = result.axes;\n                return result.data;\n            },\n            _readData: function (data) {\n                var axes = this.reader.axes(data);\n                var newData = this.reader.data(data);\n                if (this.cubeBuilder) {\n                    this._rawData = newData;\n                }\n                return this._processResult(newData, axes);\n            },\n            _createTuple: function (tuple, measure, buildRoot) {\n                var members = tuple.members;\n                var length = members.length;\n                var root = { members: [] };\n                var levelName, levelNum;\n                var name, parentName;\n                var hasChildren;\n                var hierarchy;\n                var caption;\n                var member;\n                var idx = 0;\n                if (measure) {\n                    length -= 1;\n                }\n                for (; idx < length; idx++) {\n                    member = members[idx];\n                    levelNum = Number(member.levelNum);\n                    name = member.name;\n                    parentName = member.parentName;\n                    caption = member.caption || name;\n                    hasChildren = member.hasChildren;\n                    hierarchy = member.hierarchy;\n                    levelName = member.levelName;\n                    if (buildRoot) {\n                        caption = 'All';\n                        if (levelNum === 0) {\n                            parentName = member.name;\n                        } else {\n                            levelNum -= 1;\n                        }\n                        hasChildren = true;\n                        name = hierarchy = levelName = parentName;\n                    }\n                    root.members.push({\n                        name: name,\n                        children: [],\n                        caption: caption,\n                        levelName: levelName,\n                        levelNum: levelNum.toString(),\n                        hasChildren: hasChildren,\n                        hierarchy: hierarchy,\n                        parentName: !buildRoot ? parentName : ''\n                    });\n                }\n                if (measure) {\n                    root.members.push({\n                        name: measure.name,\n                        children: []\n                    });\n                }\n                return root;\n            },\n            _hasRoot: function (target, source, descriptors) {\n                if (source.length) {\n                    return findExistingTuple(source, target).tuple;\n                }\n                var members = target.members;\n                var member;\n                var descriptor;\n                var isRoot = true;\n                var levelNum;\n                for (var idx = 0, length = members.length; idx < length; idx++) {\n                    member = members[idx];\n                    levelNum = Number(member.levelNum) || 0;\n                    descriptor = descriptors[idx];\n                    if (!(levelNum === 0 || descriptor && member.name === getName(descriptor))) {\n                        isRoot = false;\n                        break;\n                    }\n                }\n                return isRoot;\n            },\n            _mergeAxes: function (sourceAxes, data, axisToSkip) {\n                var columnMeasures = this._columnMeasures();\n                var rowMeasures = this._rowMeasures();\n                var axes = this.axes();\n                var startIndex, tuples;\n                var oldRowsLength = membersCount(axes.rows.tuples, rowMeasures);\n                var newRowsLength = sourceAxes.rows.tuples.length;\n                var oldColumnsLength = membersCount(axes.columns.tuples, columnMeasures);\n                var newColumnsLength = sourceAxes.columns.tuples.length;\n                if (axisToSkip == 'columns') {\n                    newColumnsLength = oldColumnsLength;\n                    tuples = sourceAxes.columns.tuples;\n                } else {\n                    tuples = parseSource(sourceAxes.columns.tuples, columnMeasures);\n                    data = prepareDataOnColumns(tuples, data);\n                }\n                var mergedColumns = mergeTuples(axes.columns.tuples, tuples, columnMeasures);\n                if (axisToSkip == 'rows') {\n                    newRowsLength = membersCount(sourceAxes.rows.tuples, rowMeasures);\n                    tuples = sourceAxes.rows.tuples;\n                } else {\n                    tuples = parseSource(sourceAxes.rows.tuples, rowMeasures);\n                    data = prepareDataOnRows(tuples, data);\n                }\n                var mergedRows = mergeTuples(axes.rows.tuples, tuples, rowMeasures);\n                axes.columns.tuples = mergedColumns.tuples;\n                axes.rows.tuples = mergedRows.tuples;\n                if (oldColumnsLength !== membersCount(axes.columns.tuples, columnMeasures)) {\n                    startIndex = mergedColumns.index + findDataIndex(mergedColumns.parsedRoot, mergedColumns.memberIndex, columnMeasures);\n                    var offset = oldColumnsLength + newColumnsLength;\n                    data = this._mergeColumnData(data, startIndex, newRowsLength, newColumnsLength, offset);\n                } else if (oldRowsLength !== membersCount(axes.rows.tuples, rowMeasures)) {\n                    startIndex = mergedRows.index + findDataIndex(mergedRows.parsedRoot, mergedRows.memberIndex, rowMeasures);\n                    data = this._mergeRowData(data, startIndex, newRowsLength, newColumnsLength);\n                }\n                if (axes.columns.tuples.length === 0 && axes.rows.tuples.length === 0) {\n                    data = [];\n                }\n                return {\n                    axes: axes,\n                    data: data\n                };\n            },\n            _mergeColumnData: function (newData, columnIndex, rowsLength, columnsLength, offset) {\n                var data = this.data().toJSON();\n                var rowIndex, index, drop = 0, toAdd;\n                var columnMeasures = Math.max(this._columnMeasures().length, 1);\n                rowsLength = Math.max(rowsLength, 1);\n                if (data.length > 0) {\n                    drop = columnMeasures;\n                    offset -= columnMeasures;\n                }\n                for (rowIndex = 0; rowIndex < rowsLength; rowIndex++) {\n                    index = columnIndex + rowIndex * offset;\n                    toAdd = newData.splice(0, columnsLength);\n                    toAdd.splice(0, drop);\n                    [].splice.apply(data, [\n                        index,\n                        0\n                    ].concat(toAdd));\n                }\n                return data;\n            },\n            _mergeRowData: function (newData, rowIndex, rowsLength, columnsLength) {\n                var data = this.data().toJSON();\n                var idx, dataIndex, toAdd;\n                var rowMeasures = Math.max(this._rowMeasures().length, 1);\n                columnsLength = Math.max(columnsLength, 1);\n                if (data.length > 0) {\n                    rowsLength -= rowMeasures;\n                    newData.splice(0, columnsLength * rowMeasures);\n                }\n                for (idx = 0; idx < rowsLength; idx++) {\n                    toAdd = newData.splice(0, columnsLength);\n                    dataIndex = rowIndex * columnsLength + idx * columnsLength;\n                    [].splice.apply(data, [\n                        dataIndex,\n                        0\n                    ].concat(toAdd));\n                }\n                return data;\n            },\n            _columnMeasures: function () {\n                var measures = this.measures();\n                var columnMeasures = [];\n                if (this.measuresAxis() === 'columns') {\n                    if (this.columns().length === 0) {\n                        columnMeasures = measures;\n                    } else if (measures.length > 1) {\n                        columnMeasures = measures;\n                    }\n                }\n                return columnMeasures;\n            },\n            _rowMeasures: function () {\n                var measures = this.measures();\n                var rowMeasures = [];\n                if (this.measuresAxis() === 'rows') {\n                    if (this.rows().length === 0) {\n                        rowMeasures = measures;\n                    } else if (measures.length > 1) {\n                        rowMeasures = measures;\n                    }\n                }\n                return rowMeasures;\n            },\n            _updateLocalData: function (data, state) {\n                if (this.cubeBuilder) {\n                    if (state) {\n                        this._requestData = state;\n                    }\n                    data = this._processResult(data);\n                }\n                this._data = this._observe(data);\n                this._ranges = [];\n                this._addRange(this._data);\n                this._total = this._data.length;\n                this._pristineTotal = this._total;\n                this._process(this._data);\n            },\n            data: function (value) {\n                var that = this;\n                if (value !== undefined) {\n                    this._pristineData = value.slice(0);\n                    this._updateLocalData(value, {\n                        columns: this.columns(),\n                        rows: this.rows(),\n                        measures: this.measures()\n                    });\n                } else {\n                    return that._data;\n                }\n            },\n            _normalizeTuples: function (tuples, source, descriptors, measures) {\n                var length = measures.length || 1;\n                var idx = 0;\n                var roots = [];\n                var indexes = {};\n                var measureIdx = 0;\n                var tuple, memberIdx, last;\n                if (!tuples.length) {\n                    return;\n                }\n                if (this._skipNormalize <= 0 && !this._hasRoot(tuples[0], source, descriptors)) {\n                    this._skipNormalize = 0;\n                    for (; idx < length; idx++) {\n                        roots.push(this._createTuple(tuples[0], measures[idx], true));\n                        indexes[idx] = idx;\n                    }\n                    tuples.splice.apply(tuples, [\n                        0,\n                        tuples.length\n                    ].concat(roots).concat(tuples));\n                    idx = length;\n                }\n                if (measures.length) {\n                    last = tuple = tuples[idx];\n                    memberIdx = tuple.members.length - 1;\n                    while (tuple) {\n                        if (measureIdx >= length) {\n                            measureIdx = 0;\n                        }\n                        if (tuple.members[memberIdx].name !== measures[measureIdx].name) {\n                            tuples.splice(idx, 0, this._createTuple(tuple, measures[measureIdx]));\n                            indexes[idx] = idx;\n                        }\n                        idx += 1;\n                        measureIdx += 1;\n                        tuple = tuples[idx];\n                        if (length > measureIdx && (!tuple || tupleName(last, memberIdx - 1) !== tupleName(tuple, memberIdx - 1))) {\n                            for (; measureIdx < length; measureIdx++) {\n                                tuples.splice(idx, 0, this._createTuple(last, measures[measureIdx]));\n                                indexes[idx] = idx;\n                                idx += 1;\n                            }\n                            tuple = tuples[idx];\n                        }\n                        last = tuple;\n                    }\n                }\n                return indexes;\n            },\n            _addMissingDataItems: function (result, metadata) {\n                while (metadata.rowIndexes[parseInt(result.length / metadata.columnsLength, 10)] !== undefined) {\n                    for (var idx = 0; idx < metadata.columnsLength; idx++) {\n                        result = addEmptyDataItem(result);\n                    }\n                }\n                while (metadata.columnIndexes[result.length % metadata.columnsLength] !== undefined) {\n                    result = addEmptyDataItem(result);\n                }\n                return result;\n            },\n            _normalizeOrdinals: function (result, dataItem, metadata) {\n                var lastOrdinal = metadata.lastOrdinal;\n                if (!dataItem) {\n                    return addEmptyDataItem(result);\n                }\n                if (dataItem.ordinal - lastOrdinal > 1) {\n                    lastOrdinal += 1;\n                    while (lastOrdinal < dataItem.ordinal && result.length < metadata.length) {\n                        result = this._addMissingDataItems(addEmptyDataItem(result), metadata);\n                        lastOrdinal += 1;\n                    }\n                }\n                dataItem.ordinal = result.length;\n                result[result.length] = dataItem;\n                return result;\n            },\n            _normalizeData: function (options) {\n                var data = options.data;\n                var dataIdx = 0;\n                var dataItem;\n                var result = [];\n                var lastOrdinal;\n                var length;\n                options.lastOrdinal = 0;\n                options.columnIndexes = options.columnIndexes || {};\n                options.rowIndexes = options.rowIndexes || {};\n                options.columnsLength = options.columnsLength || 1;\n                options.rowsLength = options.rowsLength || 1;\n                options.length = options.columnsLength * options.rowsLength;\n                length = options.length;\n                if (data.length === length) {\n                    return data;\n                }\n                while (result.length < length) {\n                    dataItem = data[dataIdx++];\n                    if (dataItem) {\n                        lastOrdinal = dataItem.ordinal;\n                    }\n                    result = this._normalizeOrdinals(this._addMissingDataItems(result, options), dataItem, options);\n                    options.lastOrdinal = lastOrdinal;\n                }\n                return result;\n            },\n            discover: function (options, converter) {\n                var that = this, transport = that.transport;\n                return $.Deferred(function (deferred) {\n                    transport.discover(extend({\n                        success: function (response) {\n                            response = that.reader.parse(response);\n                            if (that._handleCustomErrors(response)) {\n                                return;\n                            }\n                            if (converter) {\n                                response = converter(response);\n                            }\n                            deferred.resolve(response);\n                        },\n                        error: function (response, status, error) {\n                            deferred.reject(response);\n                            that.error(response, status, error);\n                        }\n                    }, options));\n                }).promise().done(function () {\n                    that.trigger('schemaChange');\n                });\n            },\n            schemaMeasures: function () {\n                var that = this;\n                return that.discover({\n                    data: {\n                        command: 'schemaMeasures',\n                        restrictions: {\n                            catalogName: that.transport.catalog(),\n                            cubeName: that.transport.cube()\n                        }\n                    }\n                }, function (response) {\n                    return that.reader.measures(response);\n                });\n            },\n            schemaKPIs: function () {\n                var that = this;\n                return that.discover({\n                    data: {\n                        command: 'schemaKPIs',\n                        restrictions: {\n                            catalogName: that.transport.catalog(),\n                            cubeName: that.transport.cube()\n                        }\n                    }\n                }, function (response) {\n                    return that.reader.kpis(response);\n                });\n            },\n            schemaDimensions: function () {\n                var that = this;\n                return that.discover({\n                    data: {\n                        command: 'schemaDimensions',\n                        restrictions: {\n                            catalogName: that.transport.catalog(),\n                            cubeName: that.transport.cube()\n                        }\n                    }\n                }, function (response) {\n                    return that.reader.dimensions(response);\n                });\n            },\n            schemaHierarchies: function (dimensionName) {\n                var that = this;\n                return that.discover({\n                    data: {\n                        command: 'schemaHierarchies',\n                        restrictions: {\n                            catalogName: that.transport.catalog(),\n                            cubeName: that.transport.cube(),\n                            dimensionUniqueName: dimensionName\n                        }\n                    }\n                }, function (response) {\n                    return that.reader.hierarchies(response);\n                });\n            },\n            schemaLevels: function (hierarchyName) {\n                var that = this;\n                return that.discover({\n                    data: {\n                        command: 'schemaLevels',\n                        restrictions: {\n                            catalogName: that.transport.catalog(),\n                            cubeName: that.transport.cube(),\n                            hierarchyUniqueName: hierarchyName\n                        }\n                    }\n                }, function (response) {\n                    return that.reader.levels(response);\n                });\n            },\n            schemaCubes: function () {\n                var that = this;\n                return that.discover({\n                    data: {\n                        command: 'schemaCubes',\n                        restrictions: { catalogName: that.transport.catalog() }\n                    }\n                }, function (response) {\n                    return that.reader.cubes(response);\n                });\n            },\n            schemaCatalogs: function () {\n                var that = this;\n                return that.discover({ data: { command: 'schemaCatalogs' } }, function (response) {\n                    return that.reader.catalogs(response);\n                });\n            },\n            schemaMembers: function (restrictions) {\n                var that = this;\n                var success = function (restrictions) {\n                    return function (response) {\n                        return that.reader.members(response, restrictions);\n                    };\n                }(restrictions);\n                return that.discover({\n                    data: {\n                        command: 'schemaMembers',\n                        restrictions: extend({\n                            catalogName: that.transport.catalog(),\n                            cubeName: that.transport.cube()\n                        }, restrictions)\n                    }\n                }, success);\n            },\n            _params: function (data) {\n                if (this._clearAxesData) {\n                    this._axes = {};\n                    this._data = this._observe([]);\n                    this._clearAxesData = false;\n                    this.trigger(STATERESET);\n                }\n                var options = DataSource.fn._params.call(this, data);\n                options = extend({\n                    measures: this.measures(),\n                    measuresAxis: this.measuresAxis(),\n                    columns: this.columns(),\n                    rows: this.rows()\n                }, options);\n                if (this.cubeBuilder) {\n                    this._requestData = options;\n                }\n                return options;\n            }\n        });\n        function addEmptyDataItem(result) {\n            result[result.length] = {\n                value: '',\n                fmtValue: '',\n                ordinal: result.length\n            };\n            return result;\n        }\n        function validateAxis(newAxis, axis, measures) {\n            if (newAxis.tuples.length < membersCount(axis.tuples, measures)) {\n                return axis;\n            }\n            return;\n        }\n        function adjustDataByColumn(sourceTuples, targetTuples, rowsLength, measures, data) {\n            var columnIdx, rowIdx, dataIdx;\n            var columnsLength = sourceTuples.length;\n            var targetColumnsLength = membersCount(targetTuples, measures);\n            var measuresLength = measures.length || 1;\n            for (rowIdx = 0; rowIdx < rowsLength; rowIdx++) {\n                for (columnIdx = 0; columnIdx < columnsLength; columnIdx++) {\n                    dataIdx = tupleIndex(sourceTuples[columnIdx], targetTuples) * measuresLength;\n                    dataIdx += columnIdx % measuresLength;\n                    data[rowIdx * columnsLength + columnIdx].ordinal = rowIdx * targetColumnsLength + dataIdx;\n                }\n            }\n        }\n        function adjustDataByRow(sourceTuples, targetTuples, columnsLength, measures, data) {\n            var columnIdx, rowIdx, dataIdx;\n            var rowsLength = sourceTuples.length;\n            var measuresLength = measures.length || 1;\n            for (rowIdx = 0; rowIdx < rowsLength; rowIdx++) {\n                dataIdx = tupleIndex(sourceTuples[rowIdx], targetTuples);\n                dataIdx *= measuresLength;\n                dataIdx += rowIdx % measuresLength;\n                for (columnIdx = 0; columnIdx < columnsLength; columnIdx++) {\n                    data[rowIdx * columnsLength + columnIdx].ordinal = dataIdx * columnsLength + columnIdx;\n                }\n            }\n        }\n        function tupleIndex(tuple, collection) {\n            return findExistingTuple(collection, tuple).index;\n        }\n        function membersCount(tuples, measures) {\n            if (!tuples.length) {\n                return 0;\n            }\n            var queue = tuples.slice();\n            var current = queue.shift();\n            var result = 1;\n            while (current) {\n                if (current.members) {\n                    [].push.apply(queue, current.members);\n                } else if (current.children) {\n                    if (!current.measure) {\n                        result += current.children.length;\n                    }\n                    [].push.apply(queue, current.children);\n                }\n                current = queue.shift();\n            }\n            if (measures.length) {\n                result = result * measures.length;\n            }\n            return result;\n        }\n        function normalizeAxis(axis) {\n            if (!axis) {\n                axis = { tuples: [] };\n            }\n            if (!axis.tuples) {\n                axis.tuples = [];\n            }\n            return axis;\n        }\n        function findDataIndex(tuple, memberIndex, measures) {\n            if (!tuple) {\n                return 0;\n            }\n            var measuresLength = Math.max(measures.length, 1);\n            var tuples = tuple.members.slice(0, memberIndex);\n            var counter = measuresLength;\n            var current = tuples.shift();\n            if (measuresLength > 1) {\n                measuresLength += 1;\n            }\n            while (current) {\n                if (current.name === MEASURES) {\n                    counter += measuresLength;\n                } else if (current.children) {\n                    [].push.apply(tuples, current.children);\n                } else {\n                    counter++;\n                    [].push.apply(tuples, current.members);\n                }\n                current = tuples.shift();\n            }\n            return counter;\n        }\n        function mergeTuples(target, source, measures) {\n            if (!source[0]) {\n                return {\n                    parsedRoot: null,\n                    tuples: target,\n                    memberIndex: 0,\n                    index: 0\n                };\n            }\n            var result = findExistingTuple(target, source[0]);\n            if (!result.tuple) {\n                return {\n                    parsedRoot: null,\n                    tuples: source,\n                    memberIndex: 0,\n                    index: 0\n                };\n            }\n            var targetMembers = result.tuple.members;\n            var sourceMembers = source[0].members;\n            var memberIndex = -1;\n            if (targetMembers.length !== sourceMembers.length) {\n                return {\n                    parsedRoot: null,\n                    tuples: source,\n                    memberIndex: 0,\n                    index: 0\n                };\n            }\n            for (var idx = 0, length = targetMembers.length; idx < length; idx++) {\n                if (!targetMembers[idx].measure && sourceMembers[idx].children[0]) {\n                    if (memberIndex == -1 && sourceMembers[idx].children.length) {\n                        memberIndex = idx;\n                    }\n                    targetMembers[idx].children = sourceMembers[idx].children;\n                }\n            }\n            measures = Math.max(measures.length, 1);\n            return {\n                parsedRoot: result.tuple,\n                index: result.index * measures,\n                memberIndex: memberIndex,\n                tuples: target\n            };\n        }\n        function equalTuples(first, second) {\n            var equal = true;\n            var idx, length;\n            first = first.members;\n            second = second.members;\n            for (idx = 0, length = first.length; idx < length; idx++) {\n                if (first[idx].measure || second[idx].measure) {\n                    continue;\n                }\n                equal = equal && getName(first[idx]) === getName(second[idx]);\n            }\n            return equal;\n        }\n        function findExistingTuple(tuples, toFind) {\n            var idx, length, tuple, found, counter = 0;\n            var memberIndex, membersLength, member;\n            for (idx = 0, length = tuples.length; idx < length; idx++) {\n                tuple = tuples[idx];\n                if (equalTuples(tuple, toFind)) {\n                    return {\n                        tuple: tuple,\n                        index: counter\n                    };\n                }\n                counter++;\n                for (memberIndex = 0, membersLength = tuple.members.length; memberIndex < membersLength; memberIndex++) {\n                    member = tuple.members[memberIndex];\n                    if (member.measure) {\n                        continue;\n                    }\n                    found = findExistingTuple(member.children, toFind);\n                    counter += found.index;\n                    if (found.tuple) {\n                        return {\n                            tuple: found.tuple,\n                            index: counter\n                        };\n                    }\n                }\n            }\n            return { index: counter };\n        }\n        function addMembers(members, map) {\n            var member, i, len, path = '';\n            for (i = 0, len = members.length; i < len; i++) {\n                member = members[i];\n                path += member.name;\n                if (!map[path]) {\n                    map[path] = member;\n                }\n            }\n        }\n        function findParentMember(tuple, map) {\n            var members = tuple.members;\n            var i, len, member, path = '';\n            var parentPath = '';\n            var parentMember;\n            for (i = 0, len = members.length; i < len; i++) {\n                member = members[i];\n                if (parentMember) {\n                    if (map[path + member.name]) {\n                        path += member.name;\n                        parentMember = map[path];\n                        continue;\n                    } else if (map[path + member.parentName]) {\n                        return map[path + member.parentName];\n                    } else if (map[parentPath + member.parentName]) {\n                        return map[parentPath + member.parentName];\n                    } else {\n                        return map[parentPath];\n                    }\n                }\n                path += member.name;\n                parentMember = map[member.parentName];\n                if (!parentMember) {\n                    parentMember = map[path];\n                    if (!parentMember) {\n                        return null;\n                    }\n                }\n                if (parentMember) {\n                    parentPath += parentMember.name;\n                }\n            }\n            return parentMember;\n        }\n        function measurePosition(tuple, measures) {\n            if (measures.length === 0) {\n                return -1;\n            }\n            var measure = measures[0];\n            var members = tuple.members;\n            for (var idx = 0, len = members.length; idx < len; idx++) {\n                if (members[idx].name == measure.name) {\n                    return idx;\n                }\n            }\n        }\n        function normalizeTupleMeasures(tuple, index) {\n            if (index < 0) {\n                return;\n            }\n            var member = {\n                name: MEASURES,\n                measure: true,\n                children: [$.extend({\n                        members: [],\n                        dataIndex: tuple.dataIndex\n                    }, tuple.members[index])]\n            };\n            tuple.members.splice(index, 1, member);\n            tuple.dataIndex = undefined;\n        }\n        function parseSource(tuples, measures) {\n            if (tuples.length < 1) {\n                return [];\n            }\n            var result = [];\n            var map = {};\n            var measureIndex = measurePosition(tuples[0], measures);\n            for (var i = 0; i < tuples.length; i++) {\n                var tuple = tuples[i];\n                tuple.dataIndex = i;\n                normalizeTupleMeasures(tuple, measureIndex);\n                var parentMember = findParentMember(tuple, map);\n                if (parentMember) {\n                    if (measureIndex < 0 || !parentMember.measure) {\n                        parentMember.children.push(tuple);\n                    } else {\n                        parentMember.children.push(tuple.members[measureIndex].children[0]);\n                    }\n                } else {\n                    result.push(tuple);\n                }\n                addMembers(tuple.members, map);\n            }\n            return result;\n        }\n        function prepareDataOnRows(tuples, data) {\n            if (!tuples || !tuples.length) {\n                return data;\n            }\n            var result = [];\n            var indices = buildDataIndices(tuples);\n            var rowsLength = indices.length;\n            var columnsLength = Math.max(data.length / rowsLength, 1);\n            var rowIndex, columnIndex, targetIndex, sourceIndex;\n            var calcIndex;\n            for (rowIndex = 0; rowIndex < rowsLength; rowIndex++) {\n                targetIndex = columnsLength * rowIndex;\n                sourceIndex = columnsLength * indices[rowIndex];\n                for (columnIndex = 0; columnIndex < columnsLength; columnIndex++) {\n                    calcIndex = parseInt(sourceIndex + columnIndex, 10);\n                    result[parseInt(targetIndex + columnIndex, 10)] = data[calcIndex] || {\n                        value: '',\n                        fmtValue: '',\n                        ordinal: calcIndex\n                    };\n                }\n            }\n            return result;\n        }\n        function prepareDataOnColumns(tuples, data) {\n            if (!tuples || !tuples.length) {\n                return data;\n            }\n            var result = [];\n            var indices = buildDataIndices(tuples);\n            var columnsLength = indices.length;\n            var rowsLength = Math.max(data.length / columnsLength, 1);\n            var columnIndex, rowIndex, dataIndex, calcIndex;\n            for (rowIndex = 0; rowIndex < rowsLength; rowIndex++) {\n                dataIndex = columnsLength * rowIndex;\n                for (columnIndex = 0; columnIndex < columnsLength; columnIndex++) {\n                    calcIndex = indices[columnIndex] + dataIndex;\n                    result[dataIndex + columnIndex] = data[calcIndex] || {\n                        value: '',\n                        fmtValue: '',\n                        ordinal: calcIndex\n                    };\n                }\n            }\n            return result;\n        }\n        function buildDataIndices(tuples) {\n            tuples = tuples.slice();\n            var result = [];\n            var tuple = tuples.shift();\n            var idx, length, spliceIndex, children, member;\n            while (tuple) {\n                if (tuple.dataIndex !== undefined) {\n                    result.push(tuple.dataIndex);\n                }\n                spliceIndex = 0;\n                for (idx = 0, length = tuple.members.length; idx < length; idx++) {\n                    member = tuple.members[idx];\n                    children = member.children;\n                    if (member.measure) {\n                        [].splice.apply(tuples, [\n                            0,\n                            0\n                        ].concat(children));\n                    } else {\n                        [].splice.apply(tuples, [\n                            spliceIndex,\n                            0\n                        ].concat(children));\n                    }\n                    spliceIndex += children.length;\n                }\n                tuple = tuples.shift();\n            }\n            return result;\n        }\n        PivotDataSource.create = function (options) {\n            options = options && options.push ? { data: options } : options;\n            var dataSource = options || {}, data = dataSource.data;\n            dataSource.data = data;\n            if (!(dataSource instanceof PivotDataSource) && dataSource instanceof kendo.data.DataSource) {\n                throw new Error('Incorrect DataSource type. Only PivotDataSource instances are supported');\n            }\n            return dataSource instanceof PivotDataSource ? dataSource : new PivotDataSource(dataSource);\n        };\n        function baseHierarchyPath(memberName) {\n            var parts = memberName.split('.');\n            if (parts.length > 2) {\n                return parts[0] + '.' + parts[1];\n            }\n            return memberName;\n        }\n        function expandMemberDescriptor(names, sort) {\n            var idx = names.length - 1;\n            var name = names[idx];\n            var sortDescriptor;\n            sortDescriptor = sortDescriptorForMember(sort, name);\n            if (sortDescriptor && sortDescriptor.dir) {\n                name = 'ORDER(' + name + '.Children,' + sortDescriptor.field + '.CurrentMember.MEMBER_CAPTION,' + sortDescriptor.dir + ')';\n            } else {\n                name += '.Children';\n            }\n            names[idx] = name;\n            return names;\n        }\n        function sortDescriptorForMember(sort, member) {\n            for (var idx = 0, length = sort.length; idx < length; idx++) {\n                if (member.indexOf(sort[idx].field) === 0) {\n                    return sort[idx];\n                }\n            }\n            return null;\n        }\n        function crossJoin(names) {\n            var result = 'CROSSJOIN({';\n            var r;\n            if (names.length > 2) {\n                r = names.pop();\n                result += crossJoin(names);\n            } else {\n                result += names.shift();\n                r = names.pop();\n            }\n            result += '},{';\n            result += r;\n            result += '})';\n            return result;\n        }\n        function crossJoinCommand(members, measures) {\n            var tmp = members.slice(0);\n            if (measures.length > 1) {\n                tmp.push('{' + measureNames(measures).join(',') + '}');\n            }\n            return crossJoin(tmp);\n        }\n        function measureNames(measures) {\n            var idx = 0;\n            var length = measures.length;\n            var result = [];\n            var measure;\n            for (; idx < length; idx++) {\n                measure = measures[idx];\n                result.push(measure.name !== undefined ? measure.name : measure);\n            }\n            return result;\n        }\n        function getName(name) {\n            name = name.name || name;\n            if (toString.call(name) === '[object Array]') {\n                name = name[name.length - 1];\n            }\n            return name;\n        }\n        function getRootNames(members) {\n            var length = members.length;\n            var names = [];\n            var idx = 0;\n            for (; idx < length; idx++) {\n                names.push(members[idx].name[0]);\n            }\n            return names;\n        }\n        function mapNames(names, rootNames) {\n            var name;\n            var rootName;\n            var j;\n            var idx = 0;\n            var length = names.length;\n            var rootLength = rootNames.length;\n            rootNames = rootNames.slice(0);\n            for (; idx < length; idx++) {\n                name = names[idx];\n                for (j = 0; j < rootLength; j++) {\n                    rootName = baseHierarchyPath(rootNames[j]);\n                    if (name.indexOf(rootName) !== -1) {\n                        rootNames[j] = name;\n                        break;\n                    }\n                }\n            }\n            return {\n                names: rootNames,\n                expandedIdx: j,\n                uniquePath: rootNames.slice(0, j + 1).join('')\n            };\n        }\n        function parseDescriptors(members) {\n            var expanded = [];\n            var child = [];\n            var root = [];\n            var member;\n            var j, l;\n            var idx = 0;\n            var length = members.length;\n            var name;\n            var hierarchyName;\n            var found;\n            for (; idx < length; idx++) {\n                member = members[idx];\n                name = member.name;\n                found = false;\n                if (toString.call(name) !== '[object Array]') {\n                    member.name = name = [name];\n                }\n                if (name.length > 1) {\n                    child.push(member);\n                } else {\n                    hierarchyName = baseHierarchyPath(name[0]);\n                    for (j = 0, l = root.length; j < l; j++) {\n                        if (root[j].name[0].indexOf(hierarchyName) === 0) {\n                            found = true;\n                            break;\n                        }\n                    }\n                    if (!found) {\n                        root.push(member);\n                    }\n                    if (member.expand) {\n                        expanded.push(member);\n                    }\n                }\n            }\n            expanded = expanded.concat(child);\n            return {\n                root: root,\n                expanded: expanded\n            };\n        }\n        function serializeMembers(members, measures, sort) {\n            var command = '';\n            members = members || [];\n            var expanded = parseDescriptors(members);\n            var root = expanded.root;\n            var rootNames = getRootNames(root);\n            var crossJoinCommands = [];\n            expanded = expanded.expanded;\n            var length = expanded.length;\n            var idx = 0;\n            var memberName;\n            var names = [];\n            if (rootNames.length > 1 || measures.length > 1) {\n                crossJoinCommands.push(crossJoinCommand(rootNames, measures));\n                for (; idx < length; idx++) {\n                    memberName = expandMemberDescriptor(expanded[idx].name, sort);\n                    names = mapNames(memberName, rootNames).names;\n                    crossJoinCommands.push(crossJoinCommand(names, measures));\n                }\n                command += crossJoinCommands.join(',');\n            } else {\n                for (; idx < length; idx++) {\n                    memberName = expandMemberDescriptor(expanded[idx].name, sort);\n                    names.push(memberName[0]);\n                }\n                command += rootNames.concat(names).join(',');\n            }\n            return command;\n        }\n        var filterFunctionFormats = {\n            contains: ', InStr({0}.CurrentMember.MEMBER_CAPTION,\"{1}\") > 0',\n            doesnotcontain: ', InStr({0}.CurrentMember.MEMBER_CAPTION,\"{1}\") = 0',\n            startswith: ', Left({0}.CurrentMember.MEMBER_CAPTION,Len(\"{1}\"))=\"{1}\"',\n            endswith: ', Right({0}.CurrentMember.MEMBER_CAPTION,Len(\"{1}\"))=\"{1}\"',\n            eq: ', {0}.CurrentMember.MEMBER_CAPTION = \"{1}\"',\n            neq: ', NOT {0}.CurrentMember.MEMBER_CAPTION = \"{1}\"'\n        };\n        function serializeExpression(expression) {\n            var command = '';\n            var value = expression.value;\n            var field = expression.field;\n            var operator = expression.operator;\n            if (operator == 'in') {\n                command += '{';\n                command += value;\n                command += '}';\n            } else {\n                command += 'Filter(';\n                command += field + '.MEMBERS';\n                command += kendo.format(filterFunctionFormats[operator], field, value);\n                command += ')';\n            }\n            return command;\n        }\n        function serializeFilters(filter, cube) {\n            var command = '', current;\n            var filters = filter.filters;\n            var length = filters.length;\n            var idx;\n            for (idx = length - 1; idx >= 0; idx--) {\n                current = 'SELECT (';\n                current += serializeExpression(filters[idx]);\n                current += ') ON 0';\n                if (idx == length - 1) {\n                    current += ' FROM [' + cube + ']';\n                    command = current;\n                } else {\n                    command = current + ' FROM ( ' + command + ' )';\n                }\n            }\n            return command;\n        }\n        function serializeOptions(parentTagName, options, capitalize) {\n            var result = '';\n            if (options) {\n                result += '<' + parentTagName + '>';\n                var value;\n                for (var key in options) {\n                    value = options[key];\n                    if (capitalize) {\n                        key = key.replace(/([A-Z]+(?=$|[A-Z][a-z])|[A-Z]?[a-z]+)/g, '$1_').toUpperCase().replace(/_$/, '');\n                    }\n                    result += '<' + key + '>' + value + '</' + key + '>';\n                }\n                result += '</' + parentTagName + '>';\n            } else {\n                result += '<' + parentTagName + '/>';\n            }\n            return result;\n        }\n        var xmlaDiscoverCommands = {\n            schemaCubes: 'MDSCHEMA_CUBES',\n            schemaCatalogs: 'DBSCHEMA_CATALOGS',\n            schemaMeasures: 'MDSCHEMA_MEASURES',\n            schemaDimensions: 'MDSCHEMA_DIMENSIONS',\n            schemaHierarchies: 'MDSCHEMA_HIERARCHIES',\n            schemaLevels: 'MDSCHEMA_LEVELS',\n            schemaMembers: 'MDSCHEMA_MEMBERS',\n            schemaKPIs: 'MDSCHEMA_KPIS'\n        };\n        var convertersMap = {\n            read: function (options) {\n                var command = '<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\"><Header/><Body><Execute xmlns=\"urn:schemas-microsoft-com:xml-analysis\"><Command><Statement>';\n                command += 'SELECT NON EMPTY {';\n                var columns = options.columns || [];\n                var rows = options.rows || [];\n                var measures = options.measures || [];\n                var measuresRowAxis = options.measuresAxis === 'rows';\n                var sort = options.sort || [];\n                if (!columns.length && rows.length && (!measures.length || measures.length && measuresRowAxis)) {\n                    columns = rows;\n                    rows = [];\n                    measuresRowAxis = false;\n                }\n                if (!columns.length && !rows.length) {\n                    measuresRowAxis = false;\n                }\n                if (columns.length) {\n                    command += serializeMembers(columns, !measuresRowAxis ? measures : [], sort);\n                } else if (measures.length && !measuresRowAxis) {\n                    command += measureNames(measures).join(',');\n                }\n                command += '} DIMENSION PROPERTIES CHILDREN_CARDINALITY, PARENT_UNIQUE_NAME ON COLUMNS';\n                if (rows.length || measuresRowAxis && measures.length > 1) {\n                    command += ', NON EMPTY {';\n                    if (rows.length) {\n                        command += serializeMembers(rows, measuresRowAxis ? measures : [], sort);\n                    } else {\n                        command += measureNames(measures).join(',');\n                    }\n                    command += '} DIMENSION PROPERTIES CHILDREN_CARDINALITY, PARENT_UNIQUE_NAME ON ROWS';\n                }\n                if (options.filter) {\n                    command += ' FROM ';\n                    command += '(';\n                    command += serializeFilters(options.filter, options.connection.cube);\n                    command += ')';\n                } else {\n                    command += ' FROM [' + options.connection.cube + ']';\n                }\n                if (measures.length == 1 && columns.length) {\n                    command += ' WHERE (' + measureNames(measures).join(',') + ')';\n                }\n                command += '</Statement></Command><Properties><PropertyList><Catalog>' + options.connection.catalog + '</Catalog><Format>Multidimensional</Format></PropertyList></Properties></Execute></Body></Envelope>';\n                return command.replace(/\\&/g, '&amp;');\n            },\n            discover: function (options) {\n                options = options || {};\n                var command = '<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\"><Header/><Body><Discover xmlns=\"urn:schemas-microsoft-com:xml-analysis\">';\n                command += '<RequestType>' + (xmlaDiscoverCommands[options.command] || options.command) + '</RequestType>';\n                command += '<Restrictions>' + serializeOptions('RestrictionList', options.restrictions, true) + '</Restrictions>';\n                if (options.connection && options.connection.catalog) {\n                    options.properties = $.extend({}, { Catalog: options.connection.catalog }, options.properties);\n                }\n                command += '<Properties>' + serializeOptions('PropertyList', options.properties) + '</Properties>';\n                command += '</Discover></Body></Envelope>';\n                return command;\n            }\n        };\n        var XmlaTransport = kendo.data.RemoteTransport.extend({\n            init: function (options) {\n                var originalOptions = options;\n                options = this.options = extend(true, {}, this.options, options);\n                kendo.data.RemoteTransport.call(this, options);\n                if (isFunction(originalOptions.discover)) {\n                    this.discover = originalOptions.discover;\n                } else if (typeof originalOptions.discover === 'string') {\n                    this.options.discover = { url: originalOptions.discover };\n                } else if (!originalOptions.discover) {\n                    this.options.discover = this.options.read;\n                }\n            },\n            setup: function (options, type) {\n                options.data = options.data || {};\n                $.extend(true, options.data, { connection: this.options.connection });\n                return kendo.data.RemoteTransport.fn.setup.call(this, options, type);\n            },\n            options: {\n                read: {\n                    dataType: 'text',\n                    contentType: 'text/xml',\n                    type: 'POST'\n                },\n                discover: {\n                    dataType: 'text',\n                    contentType: 'text/xml',\n                    type: 'POST'\n                },\n                parameterMap: function (options, type) {\n                    return convertersMap[type](options, type);\n                }\n            },\n            discover: function (options) {\n                return $.ajax(this.setup(options, 'discover'));\n            }\n        });\n        function asArray(object) {\n            if (object == null) {\n                return [];\n            }\n            var type = toString.call(object);\n            if (type !== '[object Array]') {\n                return [object];\n            }\n            return object;\n        }\n        function translateAxis(axis) {\n            var result = { tuples: [] };\n            var tuples = asArray(kendo.getter('Tuples.Tuple', true)(axis));\n            var captionGetter = kendo.getter('Caption[\\'#text\\']');\n            var unameGetter = kendo.getter('UName[\\'#text\\']');\n            var levelNameGetter = kendo.getter('LName[\\'#text\\']');\n            var levelNumGetter = kendo.getter('LNum[\\'#text\\']');\n            var childrenGetter = kendo.getter('CHILDREN_CARDINALITY[\\'#text\\']', true);\n            var hierarchyGetter = kendo.getter('[\\'@Hierarchy\\']');\n            var parentNameGetter = kendo.getter('PARENT_UNIQUE_NAME[\\'#text\\']', true);\n            for (var idx = 0; idx < tuples.length; idx++) {\n                var members = [];\n                var member = asArray(tuples[idx].Member);\n                for (var memberIdx = 0; memberIdx < member.length; memberIdx++) {\n                    members.push({\n                        children: [],\n                        caption: captionGetter(member[memberIdx]),\n                        name: unameGetter(member[memberIdx]),\n                        levelName: levelNameGetter(member[memberIdx]),\n                        levelNum: levelNumGetter(member[memberIdx]),\n                        hasChildren: parseInt(childrenGetter(member[memberIdx]), 10) > 0,\n                        parentName: parentNameGetter(member[memberIdx]),\n                        hierarchy: hierarchyGetter(member[memberIdx])\n                    });\n                }\n                result.tuples.push({ members: members });\n            }\n            return result;\n        }\n        var schemaDataReaderMap = {\n            cubes: {\n                name: kendo.getter('CUBE_NAME[\\'#text\\']', true),\n                caption: kendo.getter('CUBE_CAPTION[\\'#text\\']', true),\n                description: kendo.getter('DESCRIPTION[\\'#text\\']', true),\n                type: kendo.getter('CUBE_TYPE[\\'#text\\']', true)\n            },\n            catalogs: {\n                name: kendo.getter('CATALOG_NAME[\\'#text\\']', true),\n                description: kendo.getter('DESCRIPTION[\\'#text\\']', true)\n            },\n            measures: {\n                name: kendo.getter('MEASURE_NAME[\\'#text\\']', true),\n                caption: kendo.getter('MEASURE_CAPTION[\\'#text\\']', true),\n                uniqueName: kendo.getter('MEASURE_UNIQUE_NAME[\\'#text\\']', true),\n                description: kendo.getter('DESCRIPTION[\\'#text\\']', true),\n                aggregator: kendo.getter('MEASURE_AGGREGATOR[\\'#text\\']', true),\n                groupName: kendo.getter('MEASUREGROUP_NAME[\\'#text\\']', true),\n                displayFolder: kendo.getter('MEASURE_DISPLAY_FOLDER[\\'#text\\']', true),\n                defaultFormat: kendo.getter('DEFAULT_FORMAT_STRING[\\'#text\\']', true)\n            },\n            kpis: {\n                name: kendo.getter('KPI_NAME[\\'#text\\']', true),\n                caption: kendo.getter('KPI_CAPTION[\\'#text\\']', true),\n                value: kendo.getter('KPI_VALUE[\\'#text\\']', true),\n                goal: kendo.getter('KPI_GOAL[\\'#text\\']', true),\n                status: kendo.getter('KPI_STATUS[\\'#text\\']', true),\n                trend: kendo.getter('KPI_TREND[\\'#text\\']', true),\n                statusGraphic: kendo.getter('KPI_STATUS_GRAPHIC[\\'#text\\']', true),\n                trendGraphic: kendo.getter('KPI_TREND_GRAPHIC[\\'#text\\']', true),\n                description: kendo.getter('KPI_DESCRIPTION[\\'#text\\']', true),\n                groupName: kendo.getter('MEASUREGROUP_NAME[\\'#text\\']', true)\n            },\n            dimensions: {\n                name: kendo.getter('DIMENSION_NAME[\\'#text\\']', true),\n                caption: kendo.getter('DIMENSION_CAPTION[\\'#text\\']', true),\n                description: kendo.getter('DESCRIPTION[\\'#text\\']', true),\n                uniqueName: kendo.getter('DIMENSION_UNIQUE_NAME[\\'#text\\']', true),\n                defaultHierarchy: kendo.getter('DEFAULT_HIERARCHY[\\'#text\\']', true),\n                type: kendo.getter('DIMENSION_TYPE[\\'#text\\']', true)\n            },\n            hierarchies: {\n                name: kendo.getter('HIERARCHY_NAME[\\'#text\\']', true),\n                caption: kendo.getter('HIERARCHY_CAPTION[\\'#text\\']', true),\n                description: kendo.getter('DESCRIPTION[\\'#text\\']', true),\n                uniqueName: kendo.getter('HIERARCHY_UNIQUE_NAME[\\'#text\\']', true),\n                dimensionUniqueName: kendo.getter('DIMENSION_UNIQUE_NAME[\\'#text\\']', true),\n                displayFolder: kendo.getter('HIERARCHY_DISPLAY_FOLDER[\\'#text\\']', true),\n                origin: kendo.getter('HIERARCHY_ORIGIN[\\'#text\\']', true),\n                defaultMember: kendo.getter('DEFAULT_MEMBER[\\'#text\\']', true)\n            },\n            levels: {\n                name: kendo.getter('LEVEL_NAME[\\'#text\\']', true),\n                caption: kendo.getter('LEVEL_CAPTION[\\'#text\\']', true),\n                description: kendo.getter('DESCRIPTION[\\'#text\\']', true),\n                uniqueName: kendo.getter('LEVEL_UNIQUE_NAME[\\'#text\\']', true),\n                dimensionUniqueName: kendo.getter('DIMENSION_UNIQUE_NAME[\\'#text\\']', true),\n                displayFolder: kendo.getter('LEVEL_DISPLAY_FOLDER[\\'#text\\']', true),\n                orderingProperty: kendo.getter('LEVEL_ORDERING_PROPERTY[\\'#text\\']', true),\n                origin: kendo.getter('LEVEL_ORIGIN[\\'#text\\']', true),\n                hierarchyUniqueName: kendo.getter('HIERARCHY_UNIQUE_NAME[\\'#text\\']', true)\n            },\n            members: {\n                name: kendo.getter('MEMBER_NAME[\\'#text\\']', true),\n                caption: kendo.getter('MEMBER_CAPTION[\\'#text\\']', true),\n                uniqueName: kendo.getter('MEMBER_UNIQUE_NAME[\\'#text\\']', true),\n                dimensionUniqueName: kendo.getter('DIMENSION_UNIQUE_NAME[\\'#text\\']', true),\n                hierarchyUniqueName: kendo.getter('HIERARCHY_UNIQUE_NAME[\\'#text\\']', true),\n                levelUniqueName: kendo.getter('LEVEL_UNIQUE_NAME[\\'#text\\']', true),\n                childrenCardinality: kendo.getter('CHILDREN_CARDINALITY[\\'#text\\']', true)\n            }\n        };\n        var xmlaReaderMethods = [\n            'axes',\n            'catalogs',\n            'cubes',\n            'dimensions',\n            'hierarchies',\n            'levels',\n            'measures'\n        ];\n        var XmlaDataReader = kendo.data.XmlDataReader.extend({\n            init: function (options) {\n                kendo.data.XmlDataReader.call(this, options);\n                this._extend(options);\n            },\n            _extend: function (options) {\n                var idx = 0;\n                var length = xmlaReaderMethods.length;\n                var methodName;\n                var option;\n                for (; idx < length; idx++) {\n                    methodName = xmlaReaderMethods[idx];\n                    option = options[methodName];\n                    if (option && option !== identity) {\n                        this[methodName] = option;\n                    }\n                }\n            },\n            parse: function (xml) {\n                var result = kendo.data.XmlDataReader.fn.parse(xml.replace(/<(\\/?)(\\w|-)+:/g, '<$1'));\n                return kendo.getter('[\\'Envelope\\'][\\'Body\\']', true)(result);\n            },\n            errors: function (root) {\n                var fault = kendo.getter('[\\'Fault\\']', true)(root);\n                if (fault) {\n                    return [{\n                            faultstring: kendo.getter('faultstring[\\'#text\\']', true)(fault),\n                            faultcode: kendo.getter('faultcode[\\'#text\\']', true)(fault)\n                        }];\n                }\n                return null;\n            },\n            axes: function (root) {\n                root = kendo.getter('ExecuteResponse[\"return\"].root', true)(root);\n                var axes = asArray(kendo.getter('Axes.Axis', true)(root));\n                var axis;\n                var result = {\n                    columns: {},\n                    rows: {}\n                };\n                for (var idx = 0; idx < axes.length; idx++) {\n                    axis = axes[idx];\n                    if (axis['@name'].toLowerCase() !== 'sliceraxis') {\n                        if (!result.columns.tuples) {\n                            result.columns = translateAxis(axis);\n                        } else {\n                            result.rows = translateAxis(axis);\n                        }\n                    }\n                }\n                return result;\n            },\n            data: function (root) {\n                root = kendo.getter('ExecuteResponse[\"return\"].root', true)(root);\n                var cells = asArray(kendo.getter('CellData.Cell', true)(root));\n                var result = [];\n                var ordinalGetter = kendo.getter('[\\'@CellOrdinal\\']');\n                var valueGetter = kendo.getter('Value[\\'#text\\']');\n                var fmtValueGetter = kendo.getter('FmtValue[\\'#text\\']');\n                for (var idx = 0; idx < cells.length; idx++) {\n                    result.push({\n                        value: valueGetter(cells[idx]),\n                        fmtValue: fmtValueGetter(cells[idx]),\n                        ordinal: parseInt(ordinalGetter(cells[idx]), 10)\n                    });\n                }\n                return result;\n            },\n            _mapSchema: function (root, getters) {\n                root = kendo.getter('DiscoverResponse[\"return\"].root', true)(root);\n                var rows = asArray(kendo.getter('row', true)(root));\n                var result = [];\n                for (var idx = 0; idx < rows.length; idx++) {\n                    var obj = {};\n                    for (var key in getters) {\n                        obj[key] = getters[key](rows[idx]);\n                    }\n                    result.push(obj);\n                }\n                return result;\n            },\n            measures: function (root) {\n                return this._mapSchema(root, schemaDataReaderMap.measures);\n            },\n            kpis: function (root) {\n                return this._mapSchema(root, schemaDataReaderMap.kpis);\n            },\n            hierarchies: function (root) {\n                return this._mapSchema(root, schemaDataReaderMap.hierarchies);\n            },\n            levels: function (root) {\n                return this._mapSchema(root, schemaDataReaderMap.levels);\n            },\n            dimensions: function (root) {\n                return this._mapSchema(root, schemaDataReaderMap.dimensions);\n            },\n            cubes: function (root) {\n                return this._mapSchema(root, schemaDataReaderMap.cubes);\n            },\n            catalogs: function (root) {\n                return this._mapSchema(root, schemaDataReaderMap.catalogs);\n            },\n            members: function (root) {\n                return this._mapSchema(root, schemaDataReaderMap.members);\n            }\n        });\n        extend(true, kendo.data, {\n            PivotDataSource: PivotDataSource,\n            XmlaTransport: XmlaTransport,\n            XmlaDataReader: XmlaDataReader,\n            PivotCubeBuilder: PivotCubeBuilder,\n            transports: { xmla: XmlaTransport },\n            readers: { xmla: XmlaDataReader }\n        });\n        var sortExpr = function (expressions, name) {\n            if (!expressions) {\n                return null;\n            }\n            for (var idx = 0, length = expressions.length; idx < length; idx++) {\n                if (expressions[idx].field === name) {\n                    return expressions[idx];\n                }\n            }\n            return null;\n        };\n        var removeExpr = function (expressions, name) {\n            var result = [];\n            for (var idx = 0, length = expressions.length; idx < length; idx++) {\n                if (expressions[idx].field !== name) {\n                    result.push(expressions[idx]);\n                }\n            }\n            return result;\n        };\n        kendo.ui.PivotSettingTarget = Widget.extend({\n            init: function (element, options) {\n                var that = this;\n                Widget.fn.init.call(that, element, options);\n                that.element.addClass('k-pivot-setting');\n                that.dataSource = kendo.data.PivotDataSource.create(options.dataSource);\n                that._refreshHandler = $.proxy(that.refresh, that);\n                that.dataSource.first(CHANGE, that._refreshHandler);\n                if (!options.template) {\n                    that.options.template = '<div data-' + kendo.ns + 'name=\"${data.name || data}\">${data.name || data}' + (that.options.enabled ? '<a class=\"k-button k-button-icon k-button-bare\"><span class=\"k-icon k-setting-delete\"></span></a>' : '') + '</div>';\n                }\n                that.template = kendo.template(that.options.template);\n                that.emptyTemplate = kendo.template(that.options.emptyTemplate);\n                that._sortable();\n                that.element.on('click' + NS, '.k-button,.k-item', function (e) {\n                    var target = $(e.target);\n                    var name = target.closest('[' + kendo.attr('name') + ']').attr(kendo.attr('name'));\n                    if (!name) {\n                        return;\n                    }\n                    if (target.hasClass('k-setting-delete')) {\n                        that.remove(name);\n                    } else if (that.options.sortable && target[0] === e.currentTarget) {\n                        that.sort({\n                            field: name,\n                            dir: target.find('.k-i-sort-asc')[0] ? 'desc' : 'asc'\n                        });\n                    }\n                });\n                if (options.filterable || options.sortable) {\n                    that.fieldMenu = new ui.PivotFieldMenu(that.element, {\n                        messages: that.options.messages.fieldMenu,\n                        filter: '.k-setting-fieldmenu',\n                        filterable: options.filterable,\n                        sortable: options.sortable,\n                        dataSource: that.dataSource\n                    });\n                }\n                that.refresh();\n            },\n            options: {\n                name: 'PivotSettingTarget',\n                template: null,\n                filterable: false,\n                sortable: false,\n                emptyTemplate: '<div class=\\'k-empty\\'>${data}</div>',\n                setting: 'columns',\n                enabled: true,\n                messages: { empty: 'Drop Fields Here' }\n            },\n            setDataSource: function (dataSource) {\n                this.dataSource.unbind(CHANGE, this._refreshHandler);\n                this.dataSource = this.options.dataSource = dataSource;\n                if (this.fieldMenu) {\n                    this.fieldMenu.setDataSource(dataSource);\n                }\n                dataSource.first(CHANGE, this._refreshHandler);\n                this.refresh();\n            },\n            _sortable: function () {\n                var that = this;\n                if (that.options.enabled) {\n                    this.sortable = this.element.kendoSortable({\n                        connectWith: this.options.connectWith,\n                        filter: '>:not(.k-empty)',\n                        hint: that.options.hint,\n                        cursor: 'move',\n                        start: function (e) {\n                            e.item.focus().blur();\n                        },\n                        change: function (e) {\n                            var name = e.item.attr(kendo.attr('name'));\n                            if (e.action == 'receive') {\n                                that.add(name);\n                            } else if (e.action == 'remove') {\n                                that.remove(name);\n                            } else if (e.action == 'sort') {\n                                that.move(name, e.newIndex);\n                            }\n                        }\n                    }).data('kendoSortable');\n                }\n            },\n            _indexOf: function (name, items) {\n                var idx, length, index = -1;\n                for (idx = 0, length = items.length; idx < length; idx++) {\n                    if (getName(items[idx]) === name) {\n                        index = idx;\n                        break;\n                    }\n                }\n                return index;\n            },\n            _isKPI: function (data) {\n                return data.type === 'kpi' || data.measure;\n            },\n            validate: function (data) {\n                var isMeasure = data.type == 2 || 'aggregator' in data || this._isKPI(data);\n                if (isMeasure) {\n                    return this.options.setting === 'measures';\n                }\n                if (this.options.setting === 'measures') {\n                    return isMeasure;\n                }\n                var items = this.dataSource[this.options.setting]();\n                var name = data.defaultHierarchy || data.uniqueName;\n                if (this._indexOf(name, items) > -1) {\n                    return false;\n                }\n                items = this.dataSource[this.options.setting === 'columns' ? 'rows' : 'columns']();\n                if (this._indexOf(name, items) > -1) {\n                    return false;\n                }\n                return true;\n            },\n            add: function (name) {\n                var items = this.dataSource[this.options.setting]();\n                var i, l;\n                name = $.isArray(name) ? name.slice(0) : [name];\n                for (i = 0, l = name.length; i < l; i++) {\n                    if (this._indexOf(name[i], items) !== -1) {\n                        name.splice(i, 1);\n                        i -= 1;\n                        l -= 1;\n                    }\n                }\n                if (name.length) {\n                    items = items.concat(name);\n                    this.dataSource[this.options.setting](items);\n                }\n            },\n            move: function (name, index) {\n                var items = this.dataSource[this.options.setting]();\n                var idx = this._indexOf(name, items);\n                if (idx > -1) {\n                    name = items.splice(idx, 1)[0];\n                    items.splice(index, 0, name);\n                    this.dataSource[this.options.setting](items);\n                }\n            },\n            remove: function (name) {\n                var items = this.dataSource[this.options.setting]();\n                var idx = this._indexOf(name, items);\n                if (idx > -1) {\n                    items.splice(idx, 1);\n                    this.dataSource[this.options.setting](items);\n                }\n            },\n            sort: function (expr) {\n                var sortable = this.options.sortable;\n                var allowUnsort = sortable === true || sortable.allowUnsort;\n                var skipExpr = allowUnsort && expr.dir === 'asc';\n                var expressions = this.dataSource.sort() || [];\n                var result = removeExpr(expressions, expr.field);\n                if (skipExpr && expressions.length !== result.length) {\n                    expr = null;\n                }\n                if (expr) {\n                    result.push(expr);\n                }\n                this.dataSource.sort(result);\n            },\n            refresh: function () {\n                var html = '';\n                var items = this.dataSource[this.options.setting]();\n                var length = items.length;\n                var idx = 0;\n                var item;\n                if (length) {\n                    for (; idx < length; idx++) {\n                        item = items[idx];\n                        item = item.name === undefined ? { name: item } : item;\n                        html += this.template(extend({ sortIcon: this._sortIcon(item.name) }, item));\n                    }\n                } else {\n                    html = this.emptyTemplate(this.options.messages.empty);\n                }\n                this.element.html(html);\n            },\n            destroy: function () {\n                Widget.fn.destroy.call(this);\n                this.dataSource.unbind(CHANGE, this._refreshHandler);\n                this.element.off(NS);\n                if (this.sortable) {\n                    this.sortable.destroy();\n                }\n                if (this.fieldMenu) {\n                    this.fieldMenu.destroy();\n                }\n                this.element = null;\n                this._refreshHandler = null;\n            },\n            _sortIcon: function (name) {\n                var expressions = this.dataSource.sort();\n                var expr = sortExpr(expressions, getName(name));\n                var icon = '';\n                if (expr) {\n                    icon = 'k-i-sort-' + expr.dir;\n                }\n                return icon;\n            }\n        });\n        var PivotGrid = Widget.extend({\n            init: function (element, options) {\n                var that = this;\n                var columnBuilder;\n                var rowBuilder;\n                Widget.fn.init.call(that, element, options);\n                that._dataSource();\n                that._bindConfigurator();\n                that._wrapper();\n                that._createLayout();\n                that._columnBuilder = columnBuilder = new ColumnBuilder();\n                that._rowBuilder = rowBuilder = new RowBuilder();\n                that._contentBuilder = new ContentBuilder();\n                that._templates();\n                that.columnsHeader.add(that.rowsHeader).on('click', 'span.k-icon', function () {\n                    var button = $(this);\n                    var builder = columnBuilder;\n                    var action = 'expandColumn';\n                    var eventName;\n                    var path = button.attr(kendo.attr('path'));\n                    var eventArgs = {\n                        axis: 'columns',\n                        path: $.parseJSON(path)\n                    };\n                    if (button.parent().is('td')) {\n                        builder = rowBuilder;\n                        action = 'expandRow';\n                        eventArgs.axis = 'rows';\n                    }\n                    var expanded = button.hasClass(STATE_EXPANDED);\n                    var metadata = builder.metadata[path];\n                    var request = metadata.expanded === undefined;\n                    eventName = expanded ? COLLAPSEMEMBER : EXPANDMEMBER;\n                    eventArgs.childrenLoaded = metadata.maxChildren > metadata.children;\n                    if (that.trigger(eventName, eventArgs)) {\n                        return;\n                    }\n                    builder.metadata[path].expanded = !expanded;\n                    button.toggleClass(STATE_EXPANDED, !expanded).toggleClass(STATE_COLLAPSED, expanded);\n                    if (!expanded && request) {\n                        that.dataSource[action](eventArgs.path);\n                    } else {\n                        that.refresh();\n                    }\n                });\n                that._scrollable();\n                if (that.options.autoBind) {\n                    that.dataSource.fetch();\n                }\n                kendo.notify(that);\n            },\n            events: [\n                DATABINDING,\n                DATABOUND,\n                EXPANDMEMBER,\n                COLLAPSEMEMBER\n            ],\n            options: {\n                name: 'PivotGrid',\n                autoBind: true,\n                reorderable: true,\n                filterable: false,\n                sortable: false,\n                height: null,\n                columnWidth: 100,\n                configurator: '',\n                columnHeaderTemplate: null,\n                rowHeaderTemplate: null,\n                dataCellTemplate: null,\n                kpiStatusTemplate: null,\n                kpiTrendTemplate: null,\n                messages: {\n                    measureFields: 'Drop Data Fields Here',\n                    columnFields: 'Drop Column Fields Here',\n                    rowFields: 'Drop Rows Fields Here'\n                }\n            },\n            _templates: function () {\n                var columnTemplate = this.options.columnHeaderTemplate;\n                var rowTemplate = this.options.rowHeaderTemplate;\n                var dataTemplate = this.options.dataCellTemplate;\n                var kpiStatusTemplate = this.options.kpiStatusTemplate;\n                var kpiTrendTemplate = this.options.kpiTrendTemplate;\n                this._columnBuilder.template = kendo.template(columnTemplate || HEADER_TEMPLATE, { useWithBlock: !!columnTemplate });\n                this._contentBuilder.dataTemplate = kendo.template(dataTemplate || DATACELL_TEMPLATE, { useWithBlock: !!dataTemplate });\n                this._contentBuilder.kpiStatusTemplate = kendo.template(kpiStatusTemplate || KPISTATUS_TEMPLATE, { useWithBlock: !!kpiStatusTemplate });\n                this._contentBuilder.kpiTrendTemplate = kendo.template(kpiTrendTemplate || KPITREND_TEMPLATE, { useWithBlock: !!kpiTrendTemplate });\n                this._rowBuilder.template = kendo.template(rowTemplate || HEADER_TEMPLATE, { useWithBlock: !!rowTemplate });\n            },\n            _bindConfigurator: function () {\n                var configurator = this.options.configurator;\n                if (configurator) {\n                    $(configurator).kendoPivotConfigurator('setDataSource', this.dataSource);\n                }\n            },\n            cellInfoByElement: function (element) {\n                element = $(element);\n                return this.cellInfo(element.index(), element.parent('tr').index());\n            },\n            cellInfo: function (columnIndex, rowIndex) {\n                var contentBuilder = this._contentBuilder;\n                var columnInfo = contentBuilder.columnIndexes[columnIndex || 0];\n                var rowInfo = contentBuilder.rowIndexes[rowIndex || 0];\n                var dataIndex;\n                if (!columnInfo || !rowInfo) {\n                    return null;\n                }\n                dataIndex = rowInfo.index * contentBuilder.rowLength + columnInfo.index;\n                return {\n                    columnTuple: columnInfo.tuple,\n                    rowTuple: rowInfo.tuple,\n                    measure: columnInfo.measure || rowInfo.measure,\n                    dataItem: this.dataSource.view()[dataIndex]\n                };\n            },\n            setDataSource: function (dataSource) {\n                this.options.dataSource = dataSource;\n                this._dataSource();\n                if (this.measuresTarget) {\n                    this.measuresTarget.setDataSource(dataSource);\n                }\n                if (this.rowsTarget) {\n                    this.rowsTarget.setDataSource(dataSource);\n                }\n                if (this.columnsTarget) {\n                    this.columnsTarget.setDataSource(dataSource);\n                }\n                this._bindConfigurator();\n                if (this.options.autoBind) {\n                    dataSource.fetch();\n                }\n            },\n            setOptions: function (options) {\n                Widget.fn.setOptions.call(this, options);\n                this._templates();\n            },\n            destroy: function () {\n                Widget.fn.destroy.call(this);\n                clearTimeout(this._headerReflowTimeout);\n            },\n            _dataSource: function () {\n                var that = this;\n                var dataSource = that.options.dataSource;\n                dataSource = $.isArray(dataSource) ? { data: dataSource } : dataSource;\n                if (that.dataSource && this._refreshHandler) {\n                    that.dataSource.unbind(CHANGE, that._refreshHandler).unbind(STATERESET, that._stateResetHandler).unbind(PROGRESS, that._progressHandler).unbind(ERROR, that._errorHandler);\n                } else {\n                    that._refreshHandler = $.proxy(that.refresh, that);\n                    that._progressHandler = $.proxy(that._requestStart, that);\n                    that._stateResetHandler = $.proxy(that._stateReset, that);\n                    that._errorHandler = $.proxy(that._error, that);\n                }\n                that.dataSource = kendo.data.PivotDataSource.create(dataSource).bind(CHANGE, that._refreshHandler).bind(PROGRESS, that._progressHandler).bind(STATERESET, that._stateResetHandler).bind(ERROR, that._errorHandler);\n            },\n            _error: function () {\n                this._progress(false);\n            },\n            _requestStart: function () {\n                this._progress(true);\n            },\n            _stateReset: function () {\n                this._columnBuilder.reset();\n                this._rowBuilder.reset();\n            },\n            _wrapper: function () {\n                var height = this.options.height;\n                this.wrapper = this.element.addClass('k-widget k-pivot');\n                if (height) {\n                    this.wrapper.css('height', height);\n                }\n            },\n            _measureFields: function () {\n                this.measureFields = $(DIV).addClass('k-pivot-toolbar k-header k-settings-measures');\n                this.measuresTarget = this._createSettingTarget(this.measureFields, {\n                    setting: 'measures',\n                    messages: { empty: this.options.messages.measureFields }\n                });\n            },\n            _createSettingTarget: function (element, options) {\n                var template = '<span tabindex=\"0\" class=\"k-button\" data-' + kendo.ns + 'name=\"${data.name}\">${data.name}';\n                var sortable = options.sortable;\n                var icons = '';\n                if (sortable) {\n                    icons += '#if (data.sortIcon) {#';\n                    icons += '<span class=\"k-icon ${data.sortIcon} k-setting-sort\"></span>';\n                    icons += '#}#';\n                }\n                if (options.filterable || sortable) {\n                    icons += '<span class=\"k-icon k-i-arrowhead-s k-setting-fieldmenu\"></span>';\n                }\n                if (this.options.reorderable) {\n                    icons += '<span class=\"k-icon k-si-close k-setting-delete\"></span>';\n                }\n                if (icons) {\n                    template += '<span class=\"k-field-actions\">' + icons + '</span>';\n                }\n                template += '</span>';\n                return new kendo.ui.PivotSettingTarget(element, $.extend({\n                    template: template,\n                    emptyTemplate: '<span class=\"k-empty\">${data}</span>',\n                    enabled: this.options.reorderable,\n                    dataSource: this.dataSource\n                }, options));\n            },\n            _initSettingTargets: function () {\n                this.columnsTarget = this._createSettingTarget(this.columnFields, {\n                    connectWith: this.rowFields,\n                    setting: 'columns',\n                    filterable: this.options.filterable,\n                    sortable: this.options.sortable,\n                    messages: {\n                        empty: this.options.messages.columnFields,\n                        fieldMenu: this.options.messages.fieldMenu\n                    }\n                });\n                this.rowsTarget = this._createSettingTarget(this.rowFields, {\n                    connectWith: this.columnFields,\n                    setting: 'rows',\n                    filterable: this.options.filterable,\n                    sortable: this.options.sortable,\n                    messages: {\n                        empty: this.options.messages.rowFields,\n                        fieldMenu: this.options.messages.fieldMenu\n                    }\n                });\n            },\n            _createLayout: function () {\n                var that = this;\n                var layoutTable = $(LAYOUT_TABLE);\n                var leftContainer = layoutTable.find('.k-pivot-rowheaders');\n                var rightContainer = layoutTable.find('.k-pivot-table');\n                var gridWrapper = $(DIV).addClass('k-grid k-widget');\n                that._measureFields();\n                that.columnFields = $(DIV).addClass('k-pivot-toolbar k-header k-settings-columns');\n                that.rowFields = $(DIV).addClass('k-pivot-toolbar k-header k-settings-rows');\n                that.columnsHeader = $('<div class=\"k-grid-header-wrap\" />').wrap('<div class=\"k-grid-header\" />');\n                that.columnsHeader.parent().css('padding-right', kendo.support.scrollbar());\n                that.rowsHeader = $('<div class=\"k-grid k-widget k-alt\"/>');\n                that.content = $('<div class=\"k-grid-content\" />');\n                leftContainer.append(that.measureFields);\n                leftContainer.append(that.rowFields);\n                leftContainer.append(that.rowsHeader);\n                gridWrapper.append(that.columnsHeader.parent());\n                gridWrapper.append(that.content);\n                rightContainer.append(that.columnFields);\n                rightContainer.append(gridWrapper);\n                that.wrapper.append(layoutTable);\n                that.columnsHeaderTree = new kendo.dom.Tree(that.columnsHeader[0]);\n                that.rowsHeaderTree = new kendo.dom.Tree(that.rowsHeader[0]);\n                that.contentTree = new kendo.dom.Tree(that.content[0]);\n                that._initSettingTargets();\n            },\n            _progress: function (toggle) {\n                kendo.ui.progress(this.wrapper, toggle);\n            },\n            _resize: function () {\n                if (this.content[0].firstChild) {\n                    this._setSectionsWidth();\n                    this._setSectionsHeight();\n                    this._setContentWidth();\n                    this._setContentHeight();\n                    this._columnHeaderReflow();\n                }\n            },\n            _columnHeaderReflow: function () {\n                var columnTable = this.columnsHeader.children('table');\n                if (!kendo.support.browser.mozilla) {\n                    return;\n                }\n                clearTimeout(this._headerReflowTimeout);\n                columnTable.css('table-layout', 'auto');\n                this._headerReflowTimeout = setTimeout(function () {\n                    columnTable.css('table-layout', '');\n                });\n            },\n            _setSectionsWidth: function () {\n                var rowsHeader = this.rowsHeader;\n                var leftColumn = rowsHeader.parent('.k-pivot-rowheaders').width(AUTO);\n                var width;\n                width = Math.max(this.measureFields.outerWidth(), this.rowFields.outerWidth());\n                width = Math.max(rowsHeader.children('table').width(), width);\n                leftColumn.width(width);\n            },\n            _setSectionsHeight: function () {\n                var measureFieldsHeight = this.measureFields.height(AUTO).height();\n                var columnFieldsHeight = this.columnFields.height(AUTO).height();\n                var rowFieldsHeight = this.rowFields.height(AUTO).innerHeight();\n                var columnsHeight = this.columnsHeader.height(AUTO).innerHeight();\n                var padding = rowFieldsHeight - this.rowFields.height();\n                var firstRowHeight = columnFieldsHeight > measureFieldsHeight ? columnFieldsHeight : measureFieldsHeight;\n                var secondRowHeight = columnsHeight > rowFieldsHeight ? columnsHeight : rowFieldsHeight;\n                this.measureFields.height(firstRowHeight);\n                this.columnFields.height(firstRowHeight);\n                this.rowFields.height(secondRowHeight - padding);\n                this.columnsHeader.height(secondRowHeight);\n            },\n            _setContentWidth: function () {\n                var contentTable = this.content.find('table');\n                var columnTable = this.columnsHeader.children('table');\n                var rowLength = contentTable.children('colgroup').children().length;\n                var calculatedWidth = rowLength * this.options.columnWidth;\n                var minWidth = Math.ceil(calculatedWidth / this.content.width() * 100);\n                if (minWidth < 100) {\n                    minWidth = 100;\n                }\n                contentTable.add(columnTable).css('width', minWidth + '%');\n                this._resetColspan(columnTable);\n            },\n            _setContentHeight: function () {\n                var that = this;\n                var content = that.content;\n                var rowsHeader = that.rowsHeader;\n                var innerHeight = that.wrapper.innerHeight();\n                var scrollbar = kendo.support.scrollbar();\n                var skipScrollbar = content[0].offsetHeight === content[0].clientHeight;\n                var height = that.options.height;\n                if (that.wrapper.is(':visible')) {\n                    if (!innerHeight || !height) {\n                        if (skipScrollbar) {\n                            scrollbar = 0;\n                        }\n                        content.height('auto');\n                        rowsHeader.height(content.height() - scrollbar);\n                        return;\n                    }\n                    innerHeight -= that.columnFields.outerHeight();\n                    innerHeight -= that.columnsHeader.outerHeight();\n                    if (innerHeight <= scrollbar * 2) {\n                        innerHeight = scrollbar * 2 + 1;\n                        if (!skipScrollbar) {\n                            innerHeight += scrollbar;\n                        }\n                    }\n                    content.height(innerHeight);\n                    if (skipScrollbar) {\n                        scrollbar = 0;\n                    }\n                    rowsHeader.height(innerHeight - scrollbar);\n                }\n            },\n            _resetColspan: function (columnTable) {\n                var that = this;\n                var cell = columnTable.children('tbody').children(':first').children(':first');\n                if (that._colspan === undefined) {\n                    that._colspan = cell.attr('colspan');\n                }\n                cell.attr('colspan', 1);\n                clearTimeout(that._layoutTimeout);\n                that._layoutTimeout = setTimeout(function () {\n                    cell.attr('colspan', that._colspan);\n                    that._colspan = undefined;\n                });\n            },\n            _axisMeasures: function (axis) {\n                var result = [];\n                var dataSource = this.dataSource;\n                var measures = dataSource.measures();\n                var hasMeasure = measures.length > 1 || measures[0] && measures[0].type;\n                if (dataSource.measuresAxis() === axis) {\n                    if (dataSource[axis]().length === 0 || hasMeasure) {\n                        result = measures;\n                    }\n                }\n                return result;\n            },\n            items: function () {\n                return [];\n            },\n            refresh: function () {\n                var that = this;\n                var dataSource = that.dataSource;\n                var axes = dataSource.axes();\n                var columns = (axes.columns || {}).tuples || [];\n                var rows = (axes.rows || {}).tuples || [];\n                var columnBuilder = that._columnBuilder;\n                var rowBuilder = that._rowBuilder;\n                var columnAxis = {};\n                var rowAxis = {};\n                if (that.trigger(DATABINDING, { action: 'rebind' })) {\n                    return;\n                }\n                columnBuilder.measures = that._axisMeasures('columns');\n                that.columnsHeaderTree.render(columnBuilder.build(columns));\n                that.rowsHeaderTree.render(rowBuilder.build(rows));\n                columnAxis = {\n                    indexes: columnBuilder._indexes,\n                    measures: columnBuilder.measures,\n                    metadata: columnBuilder.metadata\n                };\n                rowAxis = {\n                    indexes: rowBuilder._indexes,\n                    measures: this._axisMeasures('rows'),\n                    metadata: rowBuilder.metadata\n                };\n                that.contentTree.render(that._contentBuilder.build(dataSource.view(), columnAxis, rowAxis));\n                that._resize();\n                if (that.touchScroller) {\n                    that.touchScroller.contentResized();\n                } else {\n                    var touchScroller = kendo.touchScroller(that.content);\n                    if (touchScroller && touchScroller.movable) {\n                        that.touchScroller = touchScroller;\n                        touchScroller.movable.bind('change', function (e) {\n                            that.columnsHeader.scrollLeft(-e.sender.x);\n                            that.rowsHeader.scrollTop(-e.sender.y);\n                        });\n                    }\n                }\n                that._progress(false);\n                that.trigger(DATABOUND);\n            },\n            _scrollable: function () {\n                var that = this;\n                var columnsHeader = that.columnsHeader;\n                var rowsHeader = that.rowsHeader;\n                that.content.scroll(function () {\n                    columnsHeader.scrollLeft(this.scrollLeft);\n                    rowsHeader.scrollTop(this.scrollTop);\n                });\n                rowsHeader.bind('DOMMouseScroll' + NS + ' mousewheel' + NS, $.proxy(that._wheelScroll, that));\n            },\n            _wheelScroll: function (e) {\n                if (e.ctrlKey) {\n                    return;\n                }\n                var delta = kendo.wheelDeltaY(e);\n                var scrollTop = this.content.scrollTop();\n                if (delta) {\n                    e.preventDefault();\n                    $(e.currentTarget).one('wheel' + NS, false);\n                    this.rowsHeader.scrollTop(scrollTop + -delta);\n                    this.content.scrollTop(scrollTop + -delta);\n                }\n            }\n        });\n        var element = kendo.dom.element;\n        var htmlNode = kendo.dom.html;\n        var createMetadata = function (levelNum, memberIdx) {\n            return {\n                maxChildren: 0,\n                children: 0,\n                maxMembers: 0,\n                members: 0,\n                measures: 1,\n                levelNum: levelNum,\n                parentMember: memberIdx !== 0\n            };\n        };\n        var buildPath = function (tuple, index) {\n            var path = [];\n            var idx = 0;\n            for (; idx <= index; idx++) {\n                path.push(tuple.members[idx].name);\n            }\n            return path;\n        };\n        var tupleName = function (tuple, index) {\n            var name = '';\n            var idx = 0;\n            for (; idx <= index; idx++) {\n                name += tuple.members[idx].name;\n            }\n            return name;\n        };\n        var ColumnBuilder = Class.extend({\n            init: function () {\n                this.measures = 1;\n                this.metadata = {};\n            },\n            build: function (tuples) {\n                var tbody = this._tbody(tuples);\n                var colgroup = this._colGroup();\n                return [element('table', null, [\n                        colgroup,\n                        tbody\n                    ])];\n            },\n            reset: function () {\n                this.metadata = {};\n            },\n            _colGroup: function () {\n                var length = this._rowLength();\n                var children = [];\n                var idx = 0;\n                for (; idx < length; idx++) {\n                    children.push(element('col', null));\n                }\n                return element('colgroup', null, children);\n            },\n            _tbody: function (tuples) {\n                var root = tuples[0];\n                this.map = {};\n                this.rows = [];\n                this.rootTuple = root;\n                this._indexes = [];\n                if (root) {\n                    this._buildRows(root, 0);\n                    this._normalize();\n                } else {\n                    this.rows.push(element('tr', null, [element('th', null, [htmlNode('&nbsp;')])]));\n                }\n                return element('tbody', null, this.rows);\n            },\n            _normalize: function () {\n                var rows = this.rows;\n                var rowsLength = rows.length;\n                var rowIdx = 0;\n                var row;\n                var cellsLength;\n                var cellIdx;\n                var cells;\n                var cell;\n                for (; rowIdx < rowsLength; rowIdx++) {\n                    row = rows[rowIdx];\n                    if (row.rowSpan === 1) {\n                        continue;\n                    }\n                    cells = row.children;\n                    cellIdx = 0;\n                    cellsLength = cells.length;\n                    for (; cellIdx < cellsLength; cellIdx++) {\n                        cell = cells[cellIdx];\n                        if (cell.tupleAll) {\n                            cell.attr.rowSpan = row.rowSpan;\n                        }\n                    }\n                }\n            },\n            _rowIndex: function (row) {\n                var rows = this.rows;\n                var length = rows.length;\n                var idx = 0;\n                for (; idx < length; idx++) {\n                    if (rows[idx] === row) {\n                        break;\n                    }\n                }\n                return idx;\n            },\n            _rowLength: function () {\n                var cells = this.rows[0] ? this.rows[0].children : [];\n                var length = cells.length;\n                var rowLength = 0;\n                var idx = 0;\n                if (length) {\n                    for (; idx < length; idx++) {\n                        rowLength += cells[idx].attr.colSpan || 1;\n                    }\n                }\n                if (!rowLength) {\n                    rowLength = this.measures;\n                }\n                return rowLength;\n            },\n            _row: function (tuple, memberIdx, parentMember) {\n                var rootName = this.rootTuple.members[memberIdx].name;\n                var levelNum = tuple.members[memberIdx].levelNum;\n                var rowKey = rootName + levelNum;\n                var map = this.map;\n                var parentRow;\n                var children;\n                var row = map[rowKey];\n                if (!row) {\n                    row = element('tr', null, []);\n                    row.parentMember = parentMember;\n                    row.collapsed = 0;\n                    row.colSpan = 0;\n                    row.rowSpan = 1;\n                    map[rowKey] = row;\n                    parentRow = map[rootName + (Number(levelNum) - 1)];\n                    if (parentRow) {\n                        children = parentRow.children;\n                        if (children[1] && children[1].attr.className.indexOf('k-alt') === -1) {\n                            row.notFirst = true;\n                        } else {\n                            row.notFirst = parentRow.notFirst;\n                        }\n                    }\n                    this.rows.splice(this._rowIndex(parentRow) + 1, 0, row);\n                } else {\n                    row.notFirst = false;\n                    if (!row.parentMember || row.parentMember !== parentMember) {\n                        row.parentMember = parentMember;\n                        row.collapsed = 0;\n                        row.colSpan = 0;\n                    }\n                }\n                return row;\n            },\n            _measures: function (measures, tuple, className) {\n                var map = this.map;\n                var row = map.measureRow;\n                var measure;\n                if (!row) {\n                    row = element('tr', null, []);\n                    map.measureRow = row;\n                    this.rows.push(row);\n                }\n                for (var idx = 0, length = measures.length; idx < length; idx++) {\n                    measure = measures[idx];\n                    row.children.push(this._cell(className || '', [this._content(measure, tuple)], measure));\n                }\n                return length;\n            },\n            _content: function (member, tuple) {\n                return htmlNode(this.template({\n                    member: member,\n                    tuple: tuple\n                }));\n            },\n            _cell: function (className, children, member) {\n                var cell = element('th', { className: 'k-header' + className }, children);\n                cell.value = member.caption || member.name;\n                return cell;\n            },\n            _buildRows: function (tuple, memberIdx, parentMember) {\n                var members = tuple.members;\n                var member = members[memberIdx];\n                var nextMember = members[memberIdx + 1];\n                var row, childRow, children, childrenLength;\n                var cell, allCell, cellAttr;\n                var cellChildren = [];\n                var path;\n                var idx = 0;\n                var metadata;\n                var colSpan;\n                var collapsed = 0;\n                var memberCollapsed = 0;\n                if (member.measure) {\n                    this._measures(member.children, tuple);\n                    return;\n                }\n                path = kendo.stringify(buildPath(tuple, memberIdx));\n                row = this._row(tuple, memberIdx, parentMember);\n                children = member.children;\n                childrenLength = children.length;\n                metadata = this.metadata[path];\n                if (!metadata) {\n                    this.metadata[path] = metadata = createMetadata(Number(member.levelNum), memberIdx);\n                    metadata.rootLevelNum = Number(this.rootTuple.members[memberIdx].levelNum);\n                }\n                this._indexes.push({\n                    path: path,\n                    tuple: tuple\n                });\n                if (member.hasChildren) {\n                    if (metadata.expanded === false) {\n                        collapsed = metadata.maxChildren;\n                        row.collapsed += collapsed;\n                        metadata.children = 0;\n                        childrenLength = 0;\n                    }\n                    cellAttr = { className: 'k-icon ' + (childrenLength ? STATE_EXPANDED : STATE_COLLAPSED) };\n                    cellAttr[kendo.attr('path')] = path;\n                    cellChildren.push(element('span', cellAttr));\n                }\n                cellChildren.push(this._content(member, tuple));\n                cell = this._cell(row.notFirst ? ' k-first' : '', cellChildren, member);\n                row.children.push(cell);\n                row.colSpan += 1;\n                if (childrenLength) {\n                    allCell = this._cell(' k-alt', [this._content(member, tuple)], member);\n                    row.children.push(allCell);\n                    for (; idx < childrenLength; idx++) {\n                        childRow = this._buildRows(children[idx], memberIdx, member);\n                    }\n                    colSpan = childRow.colSpan;\n                    collapsed = childRow.collapsed;\n                    cell.attr.colSpan = colSpan;\n                    metadata.children = colSpan;\n                    metadata.members = 1;\n                    row.colSpan += colSpan;\n                    row.collapsed += collapsed;\n                    row.rowSpan = childRow.rowSpan + 1;\n                    if (nextMember) {\n                        if (nextMember.measure) {\n                            colSpan = this._measures(nextMember.children, tuple, ' k-alt');\n                        } else {\n                            childRow = this._buildRows(tuple, memberIdx + 1);\n                            colSpan = childRow.colSpan;\n                            row.collapsed += childRow.collapsed;\n                            memberCollapsed = childRow.collapsed;\n                        }\n                        allCell.attr.colSpan = colSpan;\n                        colSpan -= 1;\n                        metadata.members += colSpan;\n                        row.colSpan += colSpan;\n                    }\n                } else if (nextMember) {\n                    if (nextMember.measure) {\n                        colSpan = this._measures(nextMember.children, tuple);\n                    } else {\n                        childRow = this._buildRows(tuple, memberIdx + 1);\n                        colSpan = childRow.colSpan;\n                        row.collapsed += childRow.collapsed;\n                        memberCollapsed = childRow.collapsed;\n                    }\n                    metadata.members = colSpan;\n                    if (colSpan > 1) {\n                        cell.attr.colSpan = colSpan;\n                        row.colSpan += colSpan - 1;\n                    }\n                }\n                if (metadata.maxMembers < metadata.members + memberCollapsed) {\n                    metadata.maxMembers = metadata.members + memberCollapsed;\n                }\n                children = metadata.children + collapsed;\n                if (metadata.maxChildren < children) {\n                    metadata.maxChildren = children;\n                }\n                (allCell || cell).tupleAll = true;\n                return row;\n            }\n        });\n        var RowBuilder = Class.extend({\n            init: function () {\n                this.metadata = {};\n            },\n            build: function (tuples) {\n                var tbody = this._tbody(tuples);\n                var colgroup = this._colGroup();\n                return [element('table', null, [\n                        colgroup,\n                        tbody\n                    ])];\n            },\n            reset: function () {\n                this.metadata = {};\n            },\n            _rowLength: function () {\n                var children = this.rows[0].children;\n                var length = 0;\n                var idx = 0;\n                var cell = children[idx];\n                while (cell) {\n                    length += cell.attr.colSpan || 1;\n                    cell = children[++idx];\n                }\n                return length;\n            },\n            _colGroup: function () {\n                var length = this._rowLength();\n                var children = [];\n                var idx = 0;\n                for (; idx < length; idx++) {\n                    children.push(element('col', null));\n                }\n                return element('colgroup', null, children);\n            },\n            _tbody: function (tuples) {\n                var root = tuples[0];\n                this.rootTuple = root;\n                this.rows = [];\n                this.map = {};\n                this._indexes = [];\n                if (root) {\n                    this._buildRows(root, 0);\n                    this._normalize();\n                } else {\n                    this.rows.push(element('tr', null, [element('td', null, [htmlNode('&nbsp;')])]));\n                }\n                return element('tbody', null, this.rows);\n            },\n            _normalize: function () {\n                var rows = this.rows;\n                var rowsLength = rows.length;\n                var rowIdx = 0;\n                var members = this.rootTuple.members;\n                var firstMemberName = members[0].name;\n                var membersLength = members.length;\n                var memberIdx = 0;\n                var row;\n                var cell;\n                var maxcolSpan;\n                var map = this.map;\n                var allRow;\n                for (; rowIdx < rowsLength; rowIdx++) {\n                    row = rows[rowIdx];\n                    for (memberIdx = 0; memberIdx < membersLength; memberIdx++) {\n                        maxcolSpan = this[members[memberIdx].name];\n                        cell = row.colSpan['dim' + memberIdx];\n                        if (cell && cell.colSpan < maxcolSpan) {\n                            cell.attr.colSpan = maxcolSpan - cell.colSpan + 1;\n                        }\n                    }\n                }\n                row = map[firstMemberName];\n                allRow = map[firstMemberName + 'all'];\n                if (row) {\n                    row.children[0].attr.className = 'k-first';\n                }\n                if (allRow) {\n                    allRow.children[0].attr.className += ' k-first';\n                }\n            },\n            _row: function (children) {\n                var row = element('tr', null, children);\n                row.rowSpan = 1;\n                row.colSpan = {};\n                this.rows.push(row);\n                return row;\n            },\n            _content: function (member, tuple) {\n                return htmlNode(this.template({\n                    member: member,\n                    tuple: tuple\n                }));\n            },\n            _cell: function (className, children, member) {\n                var cell = element('td', { className: className }, children);\n                cell.value = member.caption || member.name;\n                return cell;\n            },\n            _buildRows: function (tuple, memberIdx) {\n                var map = this.map;\n                var path;\n                var members = tuple.members;\n                var member = members[memberIdx];\n                var nextMember = members[memberIdx + 1];\n                var children = member.children;\n                var childrenLength = children.length;\n                var levelNum = Number(member.levelNum);\n                var rootName = this.rootTuple.members[memberIdx].name;\n                var tuplePath = buildPath(tuple, memberIdx - 1).join('');\n                var rootLevelNum = Number(this.rootTuple.members[memberIdx].levelNum);\n                var parentName = tuplePath + (rootLevelNum === levelNum ? '' : member.parentName || '');\n                var row = map[parentName + 'all'] || map[parentName];\n                var colSpan = levelNum + 1;\n                var cell, allCell;\n                var childRow, allRow;\n                var metadata;\n                var className;\n                var cellChildren = [];\n                var expandIconAttr;\n                var idx;\n                if (!row || row.hasChild) {\n                    row = this._row();\n                } else {\n                    row.hasChild = true;\n                }\n                if (member.measure) {\n                    className = row.allCell ? 'k-grid-footer' : '';\n                    row.children.push(this._cell(className, [this._content(children[0], tuple)], children[0]));\n                    row.rowSpan = childrenLength;\n                    for (idx = 1; idx < childrenLength; idx++) {\n                        this._row([this._cell(className, [this._content(children[idx], tuple)], children[idx])]);\n                    }\n                    return row;\n                }\n                map[tuplePath + member.name] = row;\n                path = kendo.stringify(buildPath(tuple, memberIdx));\n                metadata = this.metadata[path];\n                if (!metadata) {\n                    this.metadata[path] = metadata = createMetadata(levelNum, memberIdx);\n                    metadata.rootLevelNum = rootLevelNum;\n                }\n                this._indexes.push({\n                    path: path,\n                    tuple: tuple\n                });\n                if (member.hasChildren) {\n                    if (metadata.expanded === false) {\n                        childrenLength = 0;\n                        metadata.children = 0;\n                    }\n                    expandIconAttr = { className: 'k-icon ' + (childrenLength ? STATE_EXPANDED : STATE_COLLAPSED) };\n                    expandIconAttr[kendo.attr('path')] = path;\n                    cellChildren.push(element('span', expandIconAttr));\n                }\n                cellChildren.push(this._content(member, tuple));\n                className = row.allCell && !childrenLength ? 'k-grid-footer' : '';\n                cell = this._cell(className, cellChildren, member);\n                cell.colSpan = colSpan;\n                row.children.push(cell);\n                row.colSpan['dim' + memberIdx] = cell;\n                if (!this[rootName] || this[rootName] < colSpan) {\n                    this[rootName] = colSpan;\n                }\n                if (childrenLength) {\n                    row.allCell = false;\n                    row.hasChild = false;\n                    for (idx = 0; idx < childrenLength; idx++) {\n                        childRow = this._buildRows(children[idx], memberIdx);\n                        if (row !== childRow) {\n                            row.rowSpan += childRow.rowSpan;\n                        }\n                    }\n                    if (row.rowSpan > 1) {\n                        cell.attr.rowSpan = row.rowSpan;\n                    }\n                    metadata.children = row.rowSpan;\n                    allCell = this._cell('k-grid-footer', [this._content(member, tuple)], member);\n                    allCell.colSpan = colSpan;\n                    allRow = this._row([allCell]);\n                    allRow.colSpan['dim' + memberIdx] = allCell;\n                    allRow.allCell = true;\n                    map[tuplePath + member.name + 'all'] = allRow;\n                    if (nextMember) {\n                        childRow = this._buildRows(tuple, memberIdx + 1);\n                        allCell.attr.rowSpan = childRow.rowSpan;\n                    }\n                    row.rowSpan += allRow.rowSpan;\n                    metadata.members = allRow.rowSpan;\n                } else if (nextMember) {\n                    row.hasChild = false;\n                    this._buildRows(tuple, memberIdx + 1);\n                    (allCell || cell).attr.rowSpan = row.rowSpan;\n                    metadata.members = row.rowSpan;\n                }\n                if (metadata.maxChildren < metadata.children) {\n                    metadata.maxChildren = metadata.children;\n                }\n                if (metadata.maxMembers < metadata.members) {\n                    metadata.maxMembers = metadata.members;\n                }\n                return row;\n            }\n        });\n        var ContentBuilder = Class.extend({\n            init: function () {\n                this.columnAxis = {};\n                this.rowAxis = {};\n            },\n            build: function (data, columnAxis, rowAxis) {\n                var index = columnAxis.indexes[0];\n                var metadata = columnAxis.metadata[index ? index.path : undefined];\n                this.columnAxis = columnAxis;\n                this.rowAxis = rowAxis;\n                this.data = data;\n                this.rowLength = metadata ? metadata.maxChildren + metadata.maxMembers : columnAxis.measures.length || 1;\n                if (!this.rowLength) {\n                    this.rowLength = 1;\n                }\n                var tbody = this._tbody();\n                var colgroup = this._colGroup();\n                return [element('table', null, [\n                        colgroup,\n                        tbody\n                    ])];\n            },\n            _colGroup: function () {\n                var length = this.columnAxis.measures.length || 1;\n                var children = [];\n                var idx = 0;\n                if (this.rows[0]) {\n                    length = this.rows[0].children.length;\n                }\n                for (; idx < length; idx++) {\n                    children.push(element('col', null));\n                }\n                return element('colgroup', null, children);\n            },\n            _tbody: function () {\n                this.rows = [];\n                if (this.data[0]) {\n                    this.columnIndexes = this._indexes(this.columnAxis, this.rowLength);\n                    this.rowIndexes = this._indexes(this.rowAxis, Math.ceil(this.data.length / this.rowLength));\n                    this._buildRows();\n                } else {\n                    this.rows.push(element('tr', null, [element('td', null, [htmlNode('&nbsp;')])]));\n                }\n                return element('tbody', null, this.rows);\n            },\n            _indexes: function (axisInfo, total) {\n                var result = [];\n                var axisInfoMember;\n                var indexes = axisInfo.indexes;\n                var metadata = axisInfo.metadata;\n                var measures = axisInfo.measures;\n                var measuresLength = measures.length || 1;\n                var current;\n                var dataIdx = 0;\n                var firstEmpty = 0;\n                var idx = 0;\n                var length = indexes.length;\n                var measureIdx;\n                var index;\n                var children;\n                var skipChildren;\n                if (!length) {\n                    for (measureIdx = 0; measureIdx < measuresLength; measureIdx++) {\n                        result[measureIdx] = {\n                            index: measureIdx,\n                            measure: measures[measureIdx],\n                            tuple: null\n                        };\n                    }\n                    return result;\n                }\n                for (; idx < length; idx++) {\n                    axisInfoMember = indexes[idx];\n                    current = metadata[axisInfoMember.path];\n                    children = current.children + current.members;\n                    skipChildren = 0;\n                    if (children) {\n                        children -= measuresLength;\n                    }\n                    if (current.expanded === false && current.children !== current.maxChildren) {\n                        skipChildren = current.maxChildren;\n                    }\n                    if (current.parentMember && current.levelNum === current.rootLevelNum) {\n                        children = -1;\n                    }\n                    if (children > -1) {\n                        for (measureIdx = 0; measureIdx < measuresLength; measureIdx++) {\n                            index = children + measureIdx;\n                            if (!current.children) {\n                                index += firstEmpty;\n                            }\n                            result[children + firstEmpty + measureIdx] = {\n                                children: children,\n                                index: dataIdx,\n                                measure: measures[measureIdx],\n                                tuple: axisInfoMember.tuple\n                            };\n                            dataIdx += 1;\n                        }\n                        while (result[firstEmpty] !== undefined) {\n                            firstEmpty += 1;\n                        }\n                    }\n                    if (firstEmpty === total) {\n                        break;\n                    }\n                    dataIdx += skipChildren;\n                }\n                return result;\n            },\n            _buildRows: function () {\n                var rowIndexes = this.rowIndexes;\n                var length = rowIndexes.length;\n                var idx = 0;\n                for (; idx < length; idx++) {\n                    this.rows.push(this._buildRow(rowIndexes[idx]));\n                }\n            },\n            _buildRow: function (rowInfo) {\n                var startIdx = rowInfo.index * this.rowLength;\n                var columnIndexes = this.columnIndexes;\n                var length = columnIndexes.length;\n                var columnInfo;\n                var cells = [];\n                var idx = 0;\n                var templateInfo;\n                var cell, cellContent;\n                var attr, dataItem, measure;\n                for (; idx < length; idx++) {\n                    columnInfo = columnIndexes[idx];\n                    attr = {};\n                    if (columnInfo.children) {\n                        attr.className = 'k-alt';\n                    }\n                    cellContent = '';\n                    dataItem = this.data[startIdx + columnInfo.index];\n                    measure = columnInfo.measure || rowInfo.measure;\n                    templateInfo = {\n                        columnTuple: columnInfo.tuple,\n                        rowTuple: rowInfo.tuple,\n                        measure: measure,\n                        dataItem: dataItem\n                    };\n                    if (dataItem.value !== '' && measure && measure.type) {\n                        if (measure.type === 'status') {\n                            cellContent = this.kpiStatusTemplate(templateInfo);\n                        } else if (measure.type === 'trend') {\n                            cellContent = this.kpiTrendTemplate(templateInfo);\n                        }\n                    }\n                    if (!cellContent) {\n                        cellContent = this.dataTemplate(templateInfo);\n                    }\n                    cell = element('td', attr, [htmlNode(cellContent)]);\n                    cell.value = dataItem.value;\n                    cells.push(cell);\n                }\n                attr = {};\n                if (rowInfo.children) {\n                    attr.className = 'k-grid-footer';\n                }\n                return element('tr', attr, cells);\n            }\n        });\n        ui.plugin(PivotGrid);\n        kendo.PivotExcelExporter = kendo.Class.extend({\n            init: function (options) {\n                this.options = options;\n                this.widget = options.widget;\n                this.dataSource = this.widget.dataSource;\n            },\n            _columns: function () {\n                var columnHeaderTable = this.widget.columnsHeaderTree.children[0];\n                var rowHeaderTable = this.widget.rowsHeaderTree.children[0];\n                var columnHeaderLength = columnHeaderTable.children[0].children.length;\n                var rowHeaderLength = rowHeaderTable.children[0].children.length;\n                var width = this.widget.options.columnWidth;\n                var result = [];\n                var idx;\n                if (rowHeaderLength && this.dataSource.data()[0]) {\n                    for (idx = 0; idx < rowHeaderLength; idx++) {\n                        result.push({ autoWidth: true });\n                    }\n                }\n                for (idx = 0; idx < columnHeaderLength; idx++) {\n                    result.push({\n                        autoWidth: false,\n                        width: width\n                    });\n                }\n                return result;\n            },\n            _cells: function (rows, type, callback) {\n                var result = [];\n                var i = 0;\n                var length = rows.length;\n                var cellsLength;\n                var row, cells;\n                var j, cell;\n                for (; i < length; i++) {\n                    row = [];\n                    cells = rows[i].children;\n                    cellsLength = cells.length;\n                    for (j = 0; j < cellsLength; j++) {\n                        cell = cells[j];\n                        row.push({\n                            background: '#7a7a7a',\n                            color: '#fff',\n                            value: cell.value,\n                            colSpan: cell.attr.colSpan || 1,\n                            rowSpan: cell.attr.rowSpan || 1\n                        });\n                    }\n                    if (callback) {\n                        callback(row, i);\n                    }\n                    result.push({\n                        cells: row,\n                        type: type\n                    });\n                }\n                return result;\n            },\n            _rows: function () {\n                var columnHeaderTable = this.widget.columnsHeaderTree.children[0];\n                var rowHeaderTable = this.widget.rowsHeaderTree.children[0];\n                var columnHeaderLength = columnHeaderTable.children[0].children.length;\n                var rowHeaderLength = rowHeaderTable.children[0].children.length;\n                var columnHeaderRows = columnHeaderTable.children[1].children;\n                var rowHeaderRows = rowHeaderTable.children[1].children;\n                var contentRows = this.widget.contentTree.children[0].children[1].children;\n                var columnRows = this._cells(columnHeaderRows, 'header');\n                if (rowHeaderLength) {\n                    columnRows[0].cells.splice(0, 0, {\n                        background: '#7a7a7a',\n                        color: '#fff',\n                        value: '',\n                        colSpan: rowHeaderLength,\n                        rowSpan: columnHeaderRows.length\n                    });\n                }\n                var dataCallback = function (row, index) {\n                    var j = 0;\n                    var cell, value;\n                    var cells = contentRows[index].children;\n                    for (; j < columnHeaderLength; j++) {\n                        cell = cells[j];\n                        value = Number(cell.value);\n                        if (isNaN(value)) {\n                            value = cell.value;\n                        }\n                        row.push({\n                            background: '#dfdfdf',\n                            color: '#333',\n                            value: value,\n                            colSpan: 1,\n                            rowSpan: 1\n                        });\n                    }\n                };\n                var rowRows = this._cells(rowHeaderRows, 'data', dataCallback);\n                return columnRows.concat(rowRows);\n            },\n            _freezePane: function () {\n                var columnHeaderTable = this.widget.columnsHeaderTree.children[0];\n                var rowHeaderTable = this.widget.rowsHeaderTree.children[0];\n                var rowHeaderLength = rowHeaderTable.children[0].children.length;\n                var columnHeaderRows = columnHeaderTable.children[1].children;\n                return {\n                    colSplit: rowHeaderLength,\n                    rowSplit: columnHeaderRows.length\n                };\n            },\n            workbook: function () {\n                var promise;\n                if (this.dataSource.view()[0]) {\n                    promise = $.Deferred();\n                    promise.resolve();\n                } else {\n                    promise = this.dataSource.fetch();\n                }\n                return promise.then($.proxy(function () {\n                    return {\n                        sheets: [{\n                                columns: this._columns(),\n                                rows: this._rows(),\n                                freezePane: this._freezePane(),\n                                filter: null\n                            }]\n                    };\n                }, this));\n            }\n        });\n        var PivotExcelMixin = {\n            extend: function (proto) {\n                proto.events.push('excelExport');\n                proto.options.excel = $.extend(proto.options.excel, this.options);\n                proto.saveAsExcel = this.saveAsExcel;\n            },\n            options: {\n                proxyURL: '',\n                filterable: false,\n                fileName: 'Export.xlsx'\n            },\n            saveAsExcel: function () {\n                var excel = this.options.excel || {};\n                var exporter = new kendo.PivotExcelExporter({ widget: this });\n                exporter.workbook().then($.proxy(function (book) {\n                    if (!this.trigger('excelExport', { workbook: book })) {\n                        var workbook = new kendo.ooxml.Workbook(book);\n                        kendo.saveAs({\n                            dataURI: workbook.toDataURL(),\n                            fileName: book.fileName || excel.fileName,\n                            proxyURL: excel.proxyURL,\n                            forceProxy: excel.forceProxy\n                        });\n                    }\n                }, this));\n            }\n        };\n        kendo.PivotExcelMixin = PivotExcelMixin;\n        if (kendo.ooxml && kendo.ooxml.Workbook) {\n            PivotExcelMixin.extend(PivotGrid.prototype);\n        }\n        if (kendo.PDFMixin) {\n            kendo.PDFMixin.extend(PivotGrid.prototype);\n            PivotGrid.fn._drawPDF = function () {\n                return this._drawPDFShadow({ width: this.wrapper.width() }, { avoidLinks: this.options.pdf.avoidLinks });\n            };\n        }\n    }(window.kendo.jQuery));\n    return window.kendo;\n}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {\n    (a3 || a2)();\n}));"],"sourceRoot":"/source/"}